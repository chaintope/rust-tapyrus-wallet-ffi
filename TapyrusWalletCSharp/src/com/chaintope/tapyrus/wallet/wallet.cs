// <auto-generated>
//     This file was generated by uniffi-bindgen-cs v0.8.0+v0.25.0
//     See https://github.com/NordSecurity/uniffi-bindgen-cs for more information.
// </auto-generated>

#nullable enable

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;

namespace com.chaintope.tapyrus.wallet;

// This is a helper for safely working with byte buffers returned from the Rust code.
// A rust-owned buffer is represented by its capacity, its current length, and a
// pointer to the underlying data.

[StructLayout(LayoutKind.Sequential)]
internal struct RustBuffer
{
    public int capacity;
    public int len;
    public IntPtr data;

    public static RustBuffer Alloc(int size)
    {
        return _UniffiHelpers.RustCall(
            (ref RustCallStatus status) =>
            {
                var buffer = _UniFFILib.ffi_tapyrus_wallet_ffi_rustbuffer_alloc(size, ref status);
                if (buffer.data == IntPtr.Zero)
                {
                    throw new AllocationException(
                        $"RustBuffer.Alloc() returned null data pointer (size={size})"
                    );
                }
                return buffer;
            }
        );
    }

    public static void Free(RustBuffer buffer)
    {
        _UniffiHelpers.RustCall(
            (ref RustCallStatus status) =>
            {
                _UniFFILib.ffi_tapyrus_wallet_ffi_rustbuffer_free(buffer, ref status);
            }
        );
    }

    public static BigEndianStream MemoryStream(IntPtr data, int length)
    {
        unsafe
        {
            return new BigEndianStream(new UnmanagedMemoryStream((byte*)data.ToPointer(), length));
        }
    }

    public BigEndianStream AsStream()
    {
        unsafe
        {
            return new BigEndianStream(new UnmanagedMemoryStream((byte*)data.ToPointer(), len));
        }
    }

    public BigEndianStream AsWriteableStream()
    {
        unsafe
        {
            return new BigEndianStream(
                new UnmanagedMemoryStream(
                    (byte*)data.ToPointer(),
                    capacity,
                    capacity,
                    FileAccess.Write
                )
            );
        }
    }
}

// This is a helper for safely passing byte references into the rust code.
// It's not actually used at the moment, because there aren't many things that you
// can take a direct pointer to managed memory, and if we're going to copy something
// then we might as well copy it into a `RustBuffer`. But it's here for API
// completeness.

[StructLayout(LayoutKind.Sequential)]
internal struct ForeignBytes
{
    public int length;
    public IntPtr data;
}

// The FfiConverter interface handles converter types to and from the FFI
//
// All implementing objects should be public to support external types.  When a
// type is external we need to import it's FfiConverter.
internal abstract class FfiConverter<CsType, FfiType>
{
    // Convert an FFI type to a C# type
    public abstract CsType Lift(FfiType value);

    // Convert C# type to an FFI type
    public abstract FfiType Lower(CsType value);

    // Read a C# type from a `ByteBuffer`
    public abstract CsType Read(BigEndianStream stream);

    // Calculate bytes to allocate when creating a `RustBuffer`
    //
    // This must return at least as many bytes as the write() function will
    // write. It can return more bytes than needed, for example when writing
    // Strings we can't know the exact bytes needed until we the UTF-8
    // encoding, so we pessimistically allocate the largest size possible (3
    // bytes per codepoint).  Allocating extra bytes is not really a big deal
    // because the `RustBuffer` is short-lived.
    public abstract int AllocationSize(CsType value);

    // Write a C# type to a `ByteBuffer`
    public abstract void Write(CsType value, BigEndianStream stream);

    // Lower a value into a `RustBuffer`
    //
    // This method lowers a value into a `RustBuffer` rather than the normal
    // FfiType.  It's used by the callback interface code.  Callback interface
    // returns are always serialized into a `RustBuffer` regardless of their
    // normal FFI type.
    public RustBuffer LowerIntoRustBuffer(CsType value)
    {
        var rbuf = RustBuffer.Alloc(AllocationSize(value));
        try
        {
            var stream = rbuf.AsWriteableStream();
            Write(value, stream);
            rbuf.len = Convert.ToInt32(stream.Position);
            return rbuf;
        }
        catch
        {
            RustBuffer.Free(rbuf);
            throw;
        }
    }

    // Lift a value from a `RustBuffer`.
    //
    // This here mostly because of the symmetry with `lowerIntoRustBuffer()`.
    // It's currently only used by the `FfiConverterRustBuffer` class below.
    protected CsType LiftFromRustBuffer(RustBuffer rbuf)
    {
        var stream = rbuf.AsStream();
        try
        {
            var item = Read(stream);
            if (stream.HasRemaining())
            {
                throw new InternalException(
                    "junk remaining in buffer after lifting, something is very wrong!!"
                );
            }
            return item;
        }
        finally
        {
            RustBuffer.Free(rbuf);
        }
    }
}

// FfiConverter that uses `RustBuffer` as the FfiType
internal abstract class FfiConverterRustBuffer<CsType> : FfiConverter<CsType, RustBuffer>
{
    public override CsType Lift(RustBuffer value)
    {
        return LiftFromRustBuffer(value);
    }

    public override RustBuffer Lower(CsType value)
    {
        return LowerIntoRustBuffer(value);
    }
}

// A handful of classes and functions to support the generated data structures.
// This would be a good candidate for isolating in its own ffi-support lib.
// Error runtime.
[StructLayout(LayoutKind.Sequential)]
struct RustCallStatus
{
    public sbyte code;
    public RustBuffer error_buf;

    public bool IsSuccess()
    {
        return code == 0;
    }

    public bool IsError()
    {
        return code == 1;
    }

    public bool IsPanic()
    {
        return code == 2;
    }
}

// Base class for all uniffi exceptions
internal class UniffiException : Exception
{
    public UniffiException()
        : base() { }

    public UniffiException(string message)
        : base(message) { }
}

internal class UndeclaredErrorException : UniffiException
{
    public UndeclaredErrorException(string message)
        : base(message) { }
}

internal class PanicException : UniffiException
{
    public PanicException(string message)
        : base(message) { }
}

internal class AllocationException : UniffiException
{
    public AllocationException(string message)
        : base(message) { }
}

internal class InternalException : UniffiException
{
    public InternalException(string message)
        : base(message) { }
}

internal class InvalidEnumException : InternalException
{
    public InvalidEnumException(string message)
        : base(message) { }
}

internal class UniffiContractVersionException : UniffiException
{
    public UniffiContractVersionException(string message)
        : base(message) { }
}

internal class UniffiContractChecksumException : UniffiException
{
    public UniffiContractChecksumException(string message)
        : base(message) { }
}

// Each top-level error class has a companion object that can lift the error from the call status's rust buffer
interface CallStatusErrorHandler<E>
    where E : Exception
{
    E Lift(RustBuffer error_buf);
}

// CallStatusErrorHandler implementation for times when we don't expect a CALL_ERROR
class NullCallStatusErrorHandler : CallStatusErrorHandler<UniffiException>
{
    public static NullCallStatusErrorHandler INSTANCE = new NullCallStatusErrorHandler();

    public UniffiException Lift(RustBuffer error_buf)
    {
        RustBuffer.Free(error_buf);
        return new UndeclaredErrorException(
            "library has returned an error not declared in UNIFFI interface file"
        );
    }
}

// Helpers for calling Rust
// In practice we usually need to be synchronized to call this safely, so it doesn't
// synchronize itself
class _UniffiHelpers
{
    public delegate void RustCallAction(ref RustCallStatus status);
    public delegate U RustCallFunc<out U>(ref RustCallStatus status);

    // Call a rust function that returns a Result<>.  Pass in the Error class companion that corresponds to the Err
    public static U RustCallWithError<U, E>(
        CallStatusErrorHandler<E> errorHandler,
        RustCallFunc<U> callback
    )
        where E : UniffiException
    {
        var status = new RustCallStatus();
        var return_value = callback(ref status);
        if (status.IsSuccess())
        {
            return return_value;
        }
        else if (status.IsError())
        {
            throw errorHandler.Lift(status.error_buf);
        }
        else if (status.IsPanic())
        {
            // when the rust code sees a panic, it tries to construct a rustbuffer
            // with the message.  but if that code panics, then it just sends back
            // an empty buffer.
            if (status.error_buf.len > 0)
            {
                throw new PanicException(FfiConverterString.INSTANCE.Lift(status.error_buf));
            }
            else
            {
                throw new PanicException("Rust panic");
            }
        }
        else
        {
            throw new InternalException($"Unknown rust call status: {status.code}");
        }
    }

    // Call a rust function that returns a Result<>.  Pass in the Error class companion that corresponds to the Err
    public static void RustCallWithError<E>(
        CallStatusErrorHandler<E> errorHandler,
        RustCallAction callback
    )
        where E : UniffiException
    {
        _UniffiHelpers.RustCallWithError(
            errorHandler,
            (ref RustCallStatus status) =>
            {
                callback(ref status);
                return 0;
            }
        );
    }

    // Call a rust function that returns a plain value
    public static U RustCall<U>(RustCallFunc<U> callback)
    {
        return _UniffiHelpers.RustCallWithError(NullCallStatusErrorHandler.INSTANCE, callback);
    }

    // Call a rust function that returns a plain value
    public static void RustCall(RustCallAction callback)
    {
        _UniffiHelpers.RustCall(
            (ref RustCallStatus status) =>
            {
                callback(ref status);
                return 0;
            }
        );
    }
}

// Big endian streams are not yet available in dotnet :'(
// https://github.com/dotnet/runtime/issues/26904

class StreamUnderflowException : Exception
{
    public StreamUnderflowException() { }
}

class BigEndianStream
{
    Stream stream;

    public BigEndianStream(Stream stream)
    {
        this.stream = stream;
    }

    public bool HasRemaining()
    {
        return (stream.Length - stream.Position) > 0;
    }

    public long Position
    {
        get => stream.Position;
        set => stream.Position = value;
    }

    public void WriteBytes(byte[] value)
    {
        stream.Write(value, 0, value.Length);
    }

    public void WriteByte(byte value)
    {
        stream.WriteByte(value);
    }

    public void WriteUShort(ushort value)
    {
        stream.WriteByte((byte)(value >> 8));
        stream.WriteByte((byte)value);
    }

    public void WriteUInt(uint value)
    {
        stream.WriteByte((byte)(value >> 24));
        stream.WriteByte((byte)(value >> 16));
        stream.WriteByte((byte)(value >> 8));
        stream.WriteByte((byte)value);
    }

    public void WriteULong(ulong value)
    {
        WriteUInt((uint)(value >> 32));
        WriteUInt((uint)value);
    }

    public void WriteSByte(sbyte value)
    {
        stream.WriteByte((byte)value);
    }

    public void WriteShort(short value)
    {
        WriteUShort((ushort)value);
    }

    public void WriteInt(int value)
    {
        WriteUInt((uint)value);
    }

    public void WriteFloat(float value)
    {
        unsafe
        {
            WriteInt(*((int*)&value));
        }
    }

    public void WriteLong(long value)
    {
        WriteULong((ulong)value);
    }

    public void WriteDouble(double value)
    {
        WriteLong(BitConverter.DoubleToInt64Bits(value));
    }

    public byte[] ReadBytes(int length)
    {
        CheckRemaining(length);
        byte[] result = new byte[length];
        stream.Read(result, 0, length);
        return result;
    }

    public byte ReadByte()
    {
        CheckRemaining(1);
        return Convert.ToByte(stream.ReadByte());
    }

    public ushort ReadUShort()
    {
        CheckRemaining(2);
        return (ushort)(stream.ReadByte() << 8 | stream.ReadByte());
    }

    public uint ReadUInt()
    {
        CheckRemaining(4);
        return (uint)(
            stream.ReadByte() << 24
            | stream.ReadByte() << 16
            | stream.ReadByte() << 8
            | stream.ReadByte()
        );
    }

    public ulong ReadULong()
    {
        return (ulong)ReadUInt() << 32 | (ulong)ReadUInt();
    }

    public sbyte ReadSByte()
    {
        return (sbyte)ReadByte();
    }

    public short ReadShort()
    {
        return (short)ReadUShort();
    }

    public int ReadInt()
    {
        return (int)ReadUInt();
    }

    public float ReadFloat()
    {
        unsafe
        {
            int value = ReadInt();
            return *((float*)&value);
        }
    }

    public long ReadLong()
    {
        return (long)ReadULong();
    }

    public double ReadDouble()
    {
        return BitConverter.Int64BitsToDouble(ReadLong());
    }

    private void CheckRemaining(int length)
    {
        if (stream.Length - stream.Position < length)
        {
            throw new StreamUnderflowException();
        }
    }
}

// Contains loading, initialization code,
// and the FFI Function declarations in a com.sun.jna.Library.


// This is an implementation detail which will be called internally by the public API.
static class _UniFFILib
{
    static _UniFFILib()
    {
        _UniFFILib.uniffiCheckContractApiVersion();
        _UniFFILib.uniffiCheckApiChecksums();
    }

    [DllImport("tapyrus_wallet_ffi")]
    public static extern void uniffi_tapyrus_wallet_ffi_fn_free_hdwallet(
        IntPtr ptr,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("tapyrus_wallet_ffi")]
    public static extern HdWalletSafeHandle uniffi_tapyrus_wallet_ffi_fn_constructor_hdwallet_new(
        RustBuffer @config,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("tapyrus_wallet_ffi")]
    public static extern ulong uniffi_tapyrus_wallet_ffi_fn_method_hdwallet_balance(
        HdWalletSafeHandle @ptr,
        RustBuffer @colorId,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("tapyrus_wallet_ffi")]
    public static extern RustBuffer uniffi_tapyrus_wallet_ffi_fn_method_hdwallet_calc_p2c_address(
        HdWalletSafeHandle @ptr,
        RustBuffer @publicKey,
        RustBuffer @contract,
        RustBuffer @colorId,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("tapyrus_wallet_ffi")]
    public static extern RustBuffer uniffi_tapyrus_wallet_ffi_fn_method_hdwallet_get_new_address(
        HdWalletSafeHandle @ptr,
        RustBuffer @colorId,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("tapyrus_wallet_ffi")]
    public static extern RustBuffer uniffi_tapyrus_wallet_ffi_fn_method_hdwallet_get_transaction(
        HdWalletSafeHandle @ptr,
        RustBuffer @txid,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("tapyrus_wallet_ffi")]
    public static extern RustBuffer uniffi_tapyrus_wallet_ffi_fn_method_hdwallet_get_tx_out_by_address(
        HdWalletSafeHandle @ptr,
        RustBuffer @tx,
        RustBuffer @address,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("tapyrus_wallet_ffi")]
    public static extern void uniffi_tapyrus_wallet_ffi_fn_method_hdwallet_store_contract(
        HdWalletSafeHandle @ptr,
        RustBuffer @contract,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("tapyrus_wallet_ffi")]
    public static extern RustBuffer uniffi_tapyrus_wallet_ffi_fn_method_hdwallet_transfer(
        HdWalletSafeHandle @ptr,
        RustBuffer @params,
        RustBuffer @utxos,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("tapyrus_wallet_ffi")]
    public static extern void uniffi_tapyrus_wallet_ffi_fn_method_hdwallet_update_contract(
        HdWalletSafeHandle @ptr,
        RustBuffer @contractId,
        RustBuffer @contract,
        RustBuffer @paymentBase,
        RustBuffer @payable,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("tapyrus_wallet_ffi")]
    public static extern RustBuffer ffi_tapyrus_wallet_ffi_rustbuffer_alloc(
        int @size,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("tapyrus_wallet_ffi")]
    public static extern RustBuffer ffi_tapyrus_wallet_ffi_rustbuffer_from_bytes(
        ForeignBytes @bytes,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("tapyrus_wallet_ffi")]
    public static extern void ffi_tapyrus_wallet_ffi_rustbuffer_free(
        RustBuffer @buf,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("tapyrus_wallet_ffi")]
    public static extern RustBuffer ffi_tapyrus_wallet_ffi_rustbuffer_reserve(
        RustBuffer @buf,
        int @additional,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("tapyrus_wallet_ffi")]
    public static extern void ffi_tapyrus_wallet_ffi_rust_future_continuation_callback_set(
        IntPtr @callback
    );

    [DllImport("tapyrus_wallet_ffi")]
    public static extern void ffi_tapyrus_wallet_ffi_rust_future_poll_u8(
        IntPtr @handle,
        IntPtr @uniffiCallback
    );

    [DllImport("tapyrus_wallet_ffi")]
    public static extern void ffi_tapyrus_wallet_ffi_rust_future_cancel_u8(IntPtr @handle);

    [DllImport("tapyrus_wallet_ffi")]
    public static extern void ffi_tapyrus_wallet_ffi_rust_future_free_u8(IntPtr @handle);

    [DllImport("tapyrus_wallet_ffi")]
    public static extern byte ffi_tapyrus_wallet_ffi_rust_future_complete_u8(
        IntPtr @handle,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("tapyrus_wallet_ffi")]
    public static extern void ffi_tapyrus_wallet_ffi_rust_future_poll_i8(
        IntPtr @handle,
        IntPtr @uniffiCallback
    );

    [DllImport("tapyrus_wallet_ffi")]
    public static extern void ffi_tapyrus_wallet_ffi_rust_future_cancel_i8(IntPtr @handle);

    [DllImport("tapyrus_wallet_ffi")]
    public static extern void ffi_tapyrus_wallet_ffi_rust_future_free_i8(IntPtr @handle);

    [DllImport("tapyrus_wallet_ffi")]
    public static extern sbyte ffi_tapyrus_wallet_ffi_rust_future_complete_i8(
        IntPtr @handle,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("tapyrus_wallet_ffi")]
    public static extern void ffi_tapyrus_wallet_ffi_rust_future_poll_u16(
        IntPtr @handle,
        IntPtr @uniffiCallback
    );

    [DllImport("tapyrus_wallet_ffi")]
    public static extern void ffi_tapyrus_wallet_ffi_rust_future_cancel_u16(IntPtr @handle);

    [DllImport("tapyrus_wallet_ffi")]
    public static extern void ffi_tapyrus_wallet_ffi_rust_future_free_u16(IntPtr @handle);

    [DllImport("tapyrus_wallet_ffi")]
    public static extern ushort ffi_tapyrus_wallet_ffi_rust_future_complete_u16(
        IntPtr @handle,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("tapyrus_wallet_ffi")]
    public static extern void ffi_tapyrus_wallet_ffi_rust_future_poll_i16(
        IntPtr @handle,
        IntPtr @uniffiCallback
    );

    [DllImport("tapyrus_wallet_ffi")]
    public static extern void ffi_tapyrus_wallet_ffi_rust_future_cancel_i16(IntPtr @handle);

    [DllImport("tapyrus_wallet_ffi")]
    public static extern void ffi_tapyrus_wallet_ffi_rust_future_free_i16(IntPtr @handle);

    [DllImport("tapyrus_wallet_ffi")]
    public static extern short ffi_tapyrus_wallet_ffi_rust_future_complete_i16(
        IntPtr @handle,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("tapyrus_wallet_ffi")]
    public static extern void ffi_tapyrus_wallet_ffi_rust_future_poll_u32(
        IntPtr @handle,
        IntPtr @uniffiCallback
    );

    [DllImport("tapyrus_wallet_ffi")]
    public static extern void ffi_tapyrus_wallet_ffi_rust_future_cancel_u32(IntPtr @handle);

    [DllImport("tapyrus_wallet_ffi")]
    public static extern void ffi_tapyrus_wallet_ffi_rust_future_free_u32(IntPtr @handle);

    [DllImport("tapyrus_wallet_ffi")]
    public static extern uint ffi_tapyrus_wallet_ffi_rust_future_complete_u32(
        IntPtr @handle,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("tapyrus_wallet_ffi")]
    public static extern void ffi_tapyrus_wallet_ffi_rust_future_poll_i32(
        IntPtr @handle,
        IntPtr @uniffiCallback
    );

    [DllImport("tapyrus_wallet_ffi")]
    public static extern void ffi_tapyrus_wallet_ffi_rust_future_cancel_i32(IntPtr @handle);

    [DllImport("tapyrus_wallet_ffi")]
    public static extern void ffi_tapyrus_wallet_ffi_rust_future_free_i32(IntPtr @handle);

    [DllImport("tapyrus_wallet_ffi")]
    public static extern int ffi_tapyrus_wallet_ffi_rust_future_complete_i32(
        IntPtr @handle,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("tapyrus_wallet_ffi")]
    public static extern void ffi_tapyrus_wallet_ffi_rust_future_poll_u64(
        IntPtr @handle,
        IntPtr @uniffiCallback
    );

    [DllImport("tapyrus_wallet_ffi")]
    public static extern void ffi_tapyrus_wallet_ffi_rust_future_cancel_u64(IntPtr @handle);

    [DllImport("tapyrus_wallet_ffi")]
    public static extern void ffi_tapyrus_wallet_ffi_rust_future_free_u64(IntPtr @handle);

    [DllImport("tapyrus_wallet_ffi")]
    public static extern ulong ffi_tapyrus_wallet_ffi_rust_future_complete_u64(
        IntPtr @handle,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("tapyrus_wallet_ffi")]
    public static extern void ffi_tapyrus_wallet_ffi_rust_future_poll_i64(
        IntPtr @handle,
        IntPtr @uniffiCallback
    );

    [DllImport("tapyrus_wallet_ffi")]
    public static extern void ffi_tapyrus_wallet_ffi_rust_future_cancel_i64(IntPtr @handle);

    [DllImport("tapyrus_wallet_ffi")]
    public static extern void ffi_tapyrus_wallet_ffi_rust_future_free_i64(IntPtr @handle);

    [DllImport("tapyrus_wallet_ffi")]
    public static extern long ffi_tapyrus_wallet_ffi_rust_future_complete_i64(
        IntPtr @handle,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("tapyrus_wallet_ffi")]
    public static extern void ffi_tapyrus_wallet_ffi_rust_future_poll_f32(
        IntPtr @handle,
        IntPtr @uniffiCallback
    );

    [DllImport("tapyrus_wallet_ffi")]
    public static extern void ffi_tapyrus_wallet_ffi_rust_future_cancel_f32(IntPtr @handle);

    [DllImport("tapyrus_wallet_ffi")]
    public static extern void ffi_tapyrus_wallet_ffi_rust_future_free_f32(IntPtr @handle);

    [DllImport("tapyrus_wallet_ffi")]
    public static extern float ffi_tapyrus_wallet_ffi_rust_future_complete_f32(
        IntPtr @handle,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("tapyrus_wallet_ffi")]
    public static extern void ffi_tapyrus_wallet_ffi_rust_future_poll_f64(
        IntPtr @handle,
        IntPtr @uniffiCallback
    );

    [DllImport("tapyrus_wallet_ffi")]
    public static extern void ffi_tapyrus_wallet_ffi_rust_future_cancel_f64(IntPtr @handle);

    [DllImport("tapyrus_wallet_ffi")]
    public static extern void ffi_tapyrus_wallet_ffi_rust_future_free_f64(IntPtr @handle);

    [DllImport("tapyrus_wallet_ffi")]
    public static extern double ffi_tapyrus_wallet_ffi_rust_future_complete_f64(
        IntPtr @handle,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("tapyrus_wallet_ffi")]
    public static extern void ffi_tapyrus_wallet_ffi_rust_future_poll_pointer(
        IntPtr @handle,
        IntPtr @uniffiCallback
    );

    [DllImport("tapyrus_wallet_ffi")]
    public static extern void ffi_tapyrus_wallet_ffi_rust_future_cancel_pointer(IntPtr @handle);

    [DllImport("tapyrus_wallet_ffi")]
    public static extern void ffi_tapyrus_wallet_ffi_rust_future_free_pointer(IntPtr @handle);

    [DllImport("tapyrus_wallet_ffi")]
    public static extern SafeHandle ffi_tapyrus_wallet_ffi_rust_future_complete_pointer(
        IntPtr @handle,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("tapyrus_wallet_ffi")]
    public static extern void ffi_tapyrus_wallet_ffi_rust_future_poll_rust_buffer(
        IntPtr @handle,
        IntPtr @uniffiCallback
    );

    [DllImport("tapyrus_wallet_ffi")]
    public static extern void ffi_tapyrus_wallet_ffi_rust_future_cancel_rust_buffer(IntPtr @handle);

    [DllImport("tapyrus_wallet_ffi")]
    public static extern void ffi_tapyrus_wallet_ffi_rust_future_free_rust_buffer(IntPtr @handle);

    [DllImport("tapyrus_wallet_ffi")]
    public static extern RustBuffer ffi_tapyrus_wallet_ffi_rust_future_complete_rust_buffer(
        IntPtr @handle,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("tapyrus_wallet_ffi")]
    public static extern void ffi_tapyrus_wallet_ffi_rust_future_poll_void(
        IntPtr @handle,
        IntPtr @uniffiCallback
    );

    [DllImport("tapyrus_wallet_ffi")]
    public static extern void ffi_tapyrus_wallet_ffi_rust_future_cancel_void(IntPtr @handle);

    [DllImport("tapyrus_wallet_ffi")]
    public static extern void ffi_tapyrus_wallet_ffi_rust_future_free_void(IntPtr @handle);

    [DllImport("tapyrus_wallet_ffi")]
    public static extern void ffi_tapyrus_wallet_ffi_rust_future_complete_void(
        IntPtr @handle,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("tapyrus_wallet_ffi")]
    public static extern ushort uniffi_tapyrus_wallet_ffi_checksum_method_hdwallet_balance();

    [DllImport("tapyrus_wallet_ffi")]
    public static extern ushort uniffi_tapyrus_wallet_ffi_checksum_method_hdwallet_calc_p2c_address();

    [DllImport("tapyrus_wallet_ffi")]
    public static extern ushort uniffi_tapyrus_wallet_ffi_checksum_method_hdwallet_get_new_address();

    [DllImport("tapyrus_wallet_ffi")]
    public static extern ushort uniffi_tapyrus_wallet_ffi_checksum_method_hdwallet_get_transaction();

    [DllImport("tapyrus_wallet_ffi")]
    public static extern ushort uniffi_tapyrus_wallet_ffi_checksum_method_hdwallet_get_tx_out_by_address();

    [DllImport("tapyrus_wallet_ffi")]
    public static extern ushort uniffi_tapyrus_wallet_ffi_checksum_method_hdwallet_store_contract();

    [DllImport("tapyrus_wallet_ffi")]
    public static extern ushort uniffi_tapyrus_wallet_ffi_checksum_method_hdwallet_transfer();

    [DllImport("tapyrus_wallet_ffi")]
    public static extern ushort uniffi_tapyrus_wallet_ffi_checksum_method_hdwallet_update_contract();

    [DllImport("tapyrus_wallet_ffi")]
    public static extern ushort uniffi_tapyrus_wallet_ffi_checksum_constructor_hdwallet_new();

    [DllImport("tapyrus_wallet_ffi")]
    public static extern uint ffi_tapyrus_wallet_ffi_uniffi_contract_version();

    static void uniffiCheckContractApiVersion()
    {
        var scaffolding_contract_version =
            _UniFFILib.ffi_tapyrus_wallet_ffi_uniffi_contract_version();
        if (24 != scaffolding_contract_version)
        {
            throw new UniffiContractVersionException(
                $"com.chaintope.tapyrus.wallet: uniffi bindings expected version `24`, library returned `{scaffolding_contract_version}`"
            );
        }
    }

    static void uniffiCheckApiChecksums()
    {
        {
            var checksum = _UniFFILib.uniffi_tapyrus_wallet_ffi_checksum_method_hdwallet_balance();
            if (checksum != 24486)
            {
                throw new UniffiContractChecksumException(
                    $"com.chaintope.tapyrus.wallet: uniffi bindings expected function `uniffi_tapyrus_wallet_ffi_checksum_method_hdwallet_balance` checksum `24486`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum =
                _UniFFILib.uniffi_tapyrus_wallet_ffi_checksum_method_hdwallet_calc_p2c_address();
            if (checksum != 52922)
            {
                throw new UniffiContractChecksumException(
                    $"com.chaintope.tapyrus.wallet: uniffi bindings expected function `uniffi_tapyrus_wallet_ffi_checksum_method_hdwallet_calc_p2c_address` checksum `52922`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum =
                _UniFFILib.uniffi_tapyrus_wallet_ffi_checksum_method_hdwallet_get_new_address();
            if (checksum != 64180)
            {
                throw new UniffiContractChecksumException(
                    $"com.chaintope.tapyrus.wallet: uniffi bindings expected function `uniffi_tapyrus_wallet_ffi_checksum_method_hdwallet_get_new_address` checksum `64180`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum =
                _UniFFILib.uniffi_tapyrus_wallet_ffi_checksum_method_hdwallet_get_transaction();
            if (checksum != 16178)
            {
                throw new UniffiContractChecksumException(
                    $"com.chaintope.tapyrus.wallet: uniffi bindings expected function `uniffi_tapyrus_wallet_ffi_checksum_method_hdwallet_get_transaction` checksum `16178`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum =
                _UniFFILib.uniffi_tapyrus_wallet_ffi_checksum_method_hdwallet_get_tx_out_by_address();
            if (checksum != 19324)
            {
                throw new UniffiContractChecksumException(
                    $"com.chaintope.tapyrus.wallet: uniffi bindings expected function `uniffi_tapyrus_wallet_ffi_checksum_method_hdwallet_get_tx_out_by_address` checksum `19324`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum =
                _UniFFILib.uniffi_tapyrus_wallet_ffi_checksum_method_hdwallet_store_contract();
            if (checksum != 7050)
            {
                throw new UniffiContractChecksumException(
                    $"com.chaintope.tapyrus.wallet: uniffi bindings expected function `uniffi_tapyrus_wallet_ffi_checksum_method_hdwallet_store_contract` checksum `7050`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_tapyrus_wallet_ffi_checksum_method_hdwallet_transfer();
            if (checksum != 4828)
            {
                throw new UniffiContractChecksumException(
                    $"com.chaintope.tapyrus.wallet: uniffi bindings expected function `uniffi_tapyrus_wallet_ffi_checksum_method_hdwallet_transfer` checksum `4828`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum =
                _UniFFILib.uniffi_tapyrus_wallet_ffi_checksum_method_hdwallet_update_contract();
            if (checksum != 39087)
            {
                throw new UniffiContractChecksumException(
                    $"com.chaintope.tapyrus.wallet: uniffi bindings expected function `uniffi_tapyrus_wallet_ffi_checksum_method_hdwallet_update_contract` checksum `39087`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_tapyrus_wallet_ffi_checksum_constructor_hdwallet_new();
            if (checksum != 57827)
            {
                throw new UniffiContractChecksumException(
                    $"com.chaintope.tapyrus.wallet: uniffi bindings expected function `uniffi_tapyrus_wallet_ffi_checksum_constructor_hdwallet_new` checksum `57827`, library returned `{checksum}`"
                );
            }
        }
    }
}

// Public interface members begin here.

#pragma warning disable 8625




class FfiConverterUInt32 : FfiConverter<uint, uint>
{
    public static FfiConverterUInt32 INSTANCE = new FfiConverterUInt32();

    public override uint Lift(uint value)
    {
        return value;
    }

    public override uint Read(BigEndianStream stream)
    {
        return stream.ReadUInt();
    }

    public override uint Lower(uint value)
    {
        return value;
    }

    public override int AllocationSize(uint value)
    {
        return 4;
    }

    public override void Write(uint value, BigEndianStream stream)
    {
        stream.WriteUInt(value);
    }
}

class FfiConverterUInt64 : FfiConverter<ulong, ulong>
{
    public static FfiConverterUInt64 INSTANCE = new FfiConverterUInt64();

    public override ulong Lift(ulong value)
    {
        return value;
    }

    public override ulong Read(BigEndianStream stream)
    {
        return stream.ReadULong();
    }

    public override ulong Lower(ulong value)
    {
        return value;
    }

    public override int AllocationSize(ulong value)
    {
        return 8;
    }

    public override void Write(ulong value, BigEndianStream stream)
    {
        stream.WriteULong(value);
    }
}

class FfiConverterBoolean : FfiConverter<bool, sbyte>
{
    public static FfiConverterBoolean INSTANCE = new FfiConverterBoolean();

    public override bool Lift(sbyte value)
    {
        return value != 0;
    }

    public override bool Read(BigEndianStream stream)
    {
        return Lift(stream.ReadSByte());
    }

    public override sbyte Lower(bool value)
    {
        return value ? (sbyte)1 : (sbyte)0;
    }

    public override int AllocationSize(bool value)
    {
        return (sbyte)1;
    }

    public override void Write(bool value, BigEndianStream stream)
    {
        stream.WriteSByte(Lower(value));
    }
}

class FfiConverterString : FfiConverter<string, RustBuffer>
{
    public static FfiConverterString INSTANCE = new FfiConverterString();

    // Note: we don't inherit from FfiConverterRustBuffer, because we use a
    // special encoding when lowering/lifting.  We can use `RustBuffer.len` to
    // store our length and avoid writing it out to the buffer.
    public override string Lift(RustBuffer value)
    {
        try
        {
            var bytes = value.AsStream().ReadBytes(value.len);
            return System.Text.Encoding.UTF8.GetString(bytes);
        }
        finally
        {
            RustBuffer.Free(value);
        }
    }

    public override string Read(BigEndianStream stream)
    {
        var length = stream.ReadInt();
        var bytes = stream.ReadBytes(length);
        return System.Text.Encoding.UTF8.GetString(bytes);
    }

    public override RustBuffer Lower(string value)
    {
        var bytes = System.Text.Encoding.UTF8.GetBytes(value);
        var rbuf = RustBuffer.Alloc(bytes.Length);
        rbuf.AsWriteableStream().WriteBytes(bytes);
        return rbuf;
    }

    // TODO(CS)
    // We aren't sure exactly how many bytes our string will be once it's UTF-8
    // encoded.  Allocate 3 bytes per unicode codepoint which will always be
    // enough.
    public override int AllocationSize(string value)
    {
        const int sizeForLength = 4;
        var sizeForString = value.Length * 3;
        return sizeForLength + sizeForString;
    }

    public override void Write(string value, BigEndianStream stream)
    {
        var bytes = System.Text.Encoding.UTF8.GetBytes(value);
        stream.WriteInt(bytes.Length);
        stream.WriteBytes(bytes);
    }
}

// `SafeHandle` implements the semantics outlined below, i.e. its thread safe, and the dispose
// method will only be called once, once all outstanding native calls have completed.
// https://github.com/mozilla/uniffi-rs/blob/0dc031132d9493ca812c3af6e7dd60ad2ea95bf0/uniffi_bindgen/src/bindings/kotlin/templates/ObjectRuntime.kt#L31
// https://learn.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.criticalhandle

internal abstract class FFIObject<THandle> : IDisposable
    where THandle : FFISafeHandle
{
    private THandle handle;

    public FFIObject(THandle handle)
    {
        this.handle = handle;
    }

    public THandle GetHandle()
    {
        return handle;
    }

    public void Dispose()
    {
        handle.Dispose();
    }
}

internal abstract class FFISafeHandle : SafeHandle
{
    public FFISafeHandle()
        : base(new IntPtr(0), true) { }

    public FFISafeHandle(IntPtr pointer)
        : this()
    {
        this.SetHandle(pointer);
    }

    public override bool IsInvalid
    {
        get { return handle.ToInt64() == 0; }
    }

    // TODO(CS) this completely breaks any guarantees offered by SafeHandle.. Extracting
    // raw value from SafeHandle puts responsiblity on the consumer of this function to
    // ensure that SafeHandle outlives the stream, and anyone who might have read the raw
    // value from the stream and are holding onto it. Otherwise, the result might be a use
    // after free, or free while method calls are still in flight.
    //
    // This is also relevant for Kotlin.
    //
    public IntPtr DangerousGetRawFfiValue()
    {
        return handle;
    }
}

static class FFIObjectUtil
{
    public static void DisposeAll(params Object?[] list)
    {
        foreach (var obj in list)
        {
            Dispose(obj);
        }
    }

    // Dispose is implemented by recursive type inspection at runtime. This is because
    // generating correct Dispose calls for recursive complex types, e.g. List<List<int>>
    // is quite cumbersome.
    private static void Dispose(dynamic? obj)
    {
        if (obj == null)
        {
            return;
        }

        if (obj is IDisposable disposable)
        {
            disposable.Dispose();
            return;
        }

        var type = obj.GetType();
        if (type != null)
        {
            if (type.IsGenericType)
            {
                if (type.GetGenericTypeDefinition().IsAssignableFrom(typeof(List<>)))
                {
                    foreach (var value in obj)
                    {
                        Dispose(value);
                    }
                }
                else if (type.GetGenericTypeDefinition().IsAssignableFrom(typeof(Dictionary<,>)))
                {
                    foreach (var value in obj.Values)
                    {
                        Dispose(value);
                    }
                }
            }
        }
    }
}

internal interface IHdWallet
{
    ulong Balance(String? @colorId);

    String CalcP2cAddress(String @publicKey, String @contract, String? @colorId);

    String GetNewAddress(String? @colorId);

    String GetTransaction(String @txid);

    List<TxOut> GetTxOutByAddress(String @tx, String @address);

    void StoreContract(Contract @contract);

    String Transfer(List<TransferParams> @params, List<TxOut> @utxos);

    void UpdateContract(
        String @contractId,
        String? @contract,
        String? @paymentBase,
        bool? @payable
    );
}

internal class HdWalletSafeHandle : FFISafeHandle
{
    public HdWalletSafeHandle()
        : base() { }

    public HdWalletSafeHandle(IntPtr pointer)
        : base(pointer) { }

    protected override bool ReleaseHandle()
    {
        _UniffiHelpers.RustCall(
            (ref RustCallStatus status) =>
            {
                _UniFFILib.uniffi_tapyrus_wallet_ffi_fn_free_hdwallet(this.handle, ref status);
            }
        );
        return true;
    }
}

internal class HdWallet : FFIObject<HdWalletSafeHandle>, IHdWallet
{
    public HdWallet(HdWalletSafeHandle pointer)
        : base(pointer) { }

    public HdWallet(Config @config)
        : this(
            _UniffiHelpers.RustCall(
                (ref RustCallStatus _status) =>
                    _UniFFILib.uniffi_tapyrus_wallet_ffi_fn_constructor_hdwallet_new(
                        FfiConverterTypeConfig.INSTANCE.Lower(@config),
                        ref _status
                    )
            )
        ) { }

    public ulong Balance(String? @colorId)
    {
        return FfiConverterUInt64.INSTANCE.Lift(
            _UniffiHelpers.RustCall(
                (ref RustCallStatus _status) =>
                    _UniFFILib.uniffi_tapyrus_wallet_ffi_fn_method_hdwallet_balance(
                        this.GetHandle(),
                        FfiConverterOptionalString.INSTANCE.Lower(@colorId),
                        ref _status
                    )
            )
        );
    }

    public String CalcP2cAddress(String @publicKey, String @contract, String? @colorId)
    {
        return FfiConverterString.INSTANCE.Lift(
            _UniffiHelpers.RustCall(
                (ref RustCallStatus _status) =>
                    _UniFFILib.uniffi_tapyrus_wallet_ffi_fn_method_hdwallet_calc_p2c_address(
                        this.GetHandle(),
                        FfiConverterString.INSTANCE.Lower(@publicKey),
                        FfiConverterString.INSTANCE.Lower(@contract),
                        FfiConverterOptionalString.INSTANCE.Lower(@colorId),
                        ref _status
                    )
            )
        );
    }

    public String GetNewAddress(String? @colorId)
    {
        return FfiConverterString.INSTANCE.Lift(
            _UniffiHelpers.RustCall(
                (ref RustCallStatus _status) =>
                    _UniFFILib.uniffi_tapyrus_wallet_ffi_fn_method_hdwallet_get_new_address(
                        this.GetHandle(),
                        FfiConverterOptionalString.INSTANCE.Lower(@colorId),
                        ref _status
                    )
            )
        );
    }

    public String GetTransaction(String @txid)
    {
        return FfiConverterString.INSTANCE.Lift(
            _UniffiHelpers.RustCall(
                (ref RustCallStatus _status) =>
                    _UniFFILib.uniffi_tapyrus_wallet_ffi_fn_method_hdwallet_get_transaction(
                        this.GetHandle(),
                        FfiConverterString.INSTANCE.Lower(@txid),
                        ref _status
                    )
            )
        );
    }

    public List<TxOut> GetTxOutByAddress(String @tx, String @address)
    {
        return FfiConverterSequenceTypeTxOut.INSTANCE.Lift(
            _UniffiHelpers.RustCall(
                (ref RustCallStatus _status) =>
                    _UniFFILib.uniffi_tapyrus_wallet_ffi_fn_method_hdwallet_get_tx_out_by_address(
                        this.GetHandle(),
                        FfiConverterString.INSTANCE.Lower(@tx),
                        FfiConverterString.INSTANCE.Lower(@address),
                        ref _status
                    )
            )
        );
    }

    public void StoreContract(Contract @contract)
    {
        _UniffiHelpers.RustCall(
            (ref RustCallStatus _status) =>
                _UniFFILib.uniffi_tapyrus_wallet_ffi_fn_method_hdwallet_store_contract(
                    this.GetHandle(),
                    FfiConverterTypeContract.INSTANCE.Lower(@contract),
                    ref _status
                )
        );
    }

    public String Transfer(List<TransferParams> @params, List<TxOut> @utxos)
    {
        return FfiConverterString.INSTANCE.Lift(
            _UniffiHelpers.RustCall(
                (ref RustCallStatus _status) =>
                    _UniFFILib.uniffi_tapyrus_wallet_ffi_fn_method_hdwallet_transfer(
                        this.GetHandle(),
                        FfiConverterSequenceTypeTransferParams.INSTANCE.Lower(@params),
                        FfiConverterSequenceTypeTxOut.INSTANCE.Lower(@utxos),
                        ref _status
                    )
            )
        );
    }

    public void UpdateContract(
        String @contractId,
        String? @contract,
        String? @paymentBase,
        bool? @payable
    )
    {
        _UniffiHelpers.RustCall(
            (ref RustCallStatus _status) =>
                _UniFFILib.uniffi_tapyrus_wallet_ffi_fn_method_hdwallet_update_contract(
                    this.GetHandle(),
                    FfiConverterString.INSTANCE.Lower(@contractId),
                    FfiConverterOptionalString.INSTANCE.Lower(@contract),
                    FfiConverterOptionalString.INSTANCE.Lower(@paymentBase),
                    FfiConverterOptionalBoolean.INSTANCE.Lower(@payable),
                    ref _status
                )
        );
    }
}

class FfiConverterTypeHdWallet : FfiConverter<HdWallet, HdWalletSafeHandle>
{
    public static FfiConverterTypeHdWallet INSTANCE = new FfiConverterTypeHdWallet();

    public override HdWalletSafeHandle Lower(HdWallet value)
    {
        return value.GetHandle();
    }

    public override HdWallet Lift(HdWalletSafeHandle value)
    {
        return new HdWallet(value);
    }

    public override HdWallet Read(BigEndianStream stream)
    {
        return Lift(new HdWalletSafeHandle(new IntPtr(stream.ReadLong())));
    }

    public override int AllocationSize(HdWallet value)
    {
        return 8;
    }

    public override void Write(HdWallet value, BigEndianStream stream)
    {
        stream.WriteLong(Lower(value).DangerousGetRawFfiValue().ToInt64());
    }
}

internal record Config(
    Network @networkMode,
    uint @networkId,
    String @esploraHost,
    uint @esploraPort,
    String? @esploraUser,
    String? @esploraPassword
) { }

class FfiConverterTypeConfig : FfiConverterRustBuffer<Config>
{
    public static FfiConverterTypeConfig INSTANCE = new FfiConverterTypeConfig();

    public override Config Read(BigEndianStream stream)
    {
        return new Config(
            @networkMode: FfiConverterTypeNetwork.INSTANCE.Read(stream),
            @networkId: FfiConverterUInt32.INSTANCE.Read(stream),
            @esploraHost: FfiConverterString.INSTANCE.Read(stream),
            @esploraPort: FfiConverterUInt32.INSTANCE.Read(stream),
            @esploraUser: FfiConverterOptionalString.INSTANCE.Read(stream),
            @esploraPassword: FfiConverterOptionalString.INSTANCE.Read(stream)
        );
    }

    public override int AllocationSize(Config value)
    {
        return FfiConverterTypeNetwork.INSTANCE.AllocationSize(value.@networkMode)
            + FfiConverterUInt32.INSTANCE.AllocationSize(value.@networkId)
            + FfiConverterString.INSTANCE.AllocationSize(value.@esploraHost)
            + FfiConverterUInt32.INSTANCE.AllocationSize(value.@esploraPort)
            + FfiConverterOptionalString.INSTANCE.AllocationSize(value.@esploraUser)
            + FfiConverterOptionalString.INSTANCE.AllocationSize(value.@esploraPassword);
    }

    public override void Write(Config value, BigEndianStream stream)
    {
        FfiConverterTypeNetwork.INSTANCE.Write(value.@networkMode, stream);
        FfiConverterUInt32.INSTANCE.Write(value.@networkId, stream);
        FfiConverterString.INSTANCE.Write(value.@esploraHost, stream);
        FfiConverterUInt32.INSTANCE.Write(value.@esploraPort, stream);
        FfiConverterOptionalString.INSTANCE.Write(value.@esploraUser, stream);
        FfiConverterOptionalString.INSTANCE.Write(value.@esploraPassword, stream);
    }
}

internal record Contract(
    String @contractId,
    String @contract,
    String @paymentBase,
    bool @payable
) { }

class FfiConverterTypeContract : FfiConverterRustBuffer<Contract>
{
    public static FfiConverterTypeContract INSTANCE = new FfiConverterTypeContract();

    public override Contract Read(BigEndianStream stream)
    {
        return new Contract(
            @contractId: FfiConverterString.INSTANCE.Read(stream),
            @contract: FfiConverterString.INSTANCE.Read(stream),
            @paymentBase: FfiConverterString.INSTANCE.Read(stream),
            @payable: FfiConverterBoolean.INSTANCE.Read(stream)
        );
    }

    public override int AllocationSize(Contract value)
    {
        return FfiConverterString.INSTANCE.AllocationSize(value.@contractId)
            + FfiConverterString.INSTANCE.AllocationSize(value.@contract)
            + FfiConverterString.INSTANCE.AllocationSize(value.@paymentBase)
            + FfiConverterBoolean.INSTANCE.AllocationSize(value.@payable);
    }

    public override void Write(Contract value, BigEndianStream stream)
    {
        FfiConverterString.INSTANCE.Write(value.@contractId, stream);
        FfiConverterString.INSTANCE.Write(value.@contract, stream);
        FfiConverterString.INSTANCE.Write(value.@paymentBase, stream);
        FfiConverterBoolean.INSTANCE.Write(value.@payable, stream);
    }
}

internal record TransferParams(ulong @amount, String @toAddress) { }

class FfiConverterTypeTransferParams : FfiConverterRustBuffer<TransferParams>
{
    public static FfiConverterTypeTransferParams INSTANCE = new FfiConverterTypeTransferParams();

    public override TransferParams Read(BigEndianStream stream)
    {
        return new TransferParams(
            @amount: FfiConverterUInt64.INSTANCE.Read(stream),
            @toAddress: FfiConverterString.INSTANCE.Read(stream)
        );
    }

    public override int AllocationSize(TransferParams value)
    {
        return FfiConverterUInt64.INSTANCE.AllocationSize(value.@amount)
            + FfiConverterString.INSTANCE.AllocationSize(value.@toAddress);
    }

    public override void Write(TransferParams value, BigEndianStream stream)
    {
        FfiConverterUInt64.INSTANCE.Write(value.@amount, stream);
        FfiConverterString.INSTANCE.Write(value.@toAddress, stream);
    }
}

internal record TxOut(
    String @txid,
    uint @index,
    ulong @amount,
    String? @colorId,
    String @address,
    bool @unspent
) { }

class FfiConverterTypeTxOut : FfiConverterRustBuffer<TxOut>
{
    public static FfiConverterTypeTxOut INSTANCE = new FfiConverterTypeTxOut();

    public override TxOut Read(BigEndianStream stream)
    {
        return new TxOut(
            @txid: FfiConverterString.INSTANCE.Read(stream),
            @index: FfiConverterUInt32.INSTANCE.Read(stream),
            @amount: FfiConverterUInt64.INSTANCE.Read(stream),
            @colorId: FfiConverterOptionalString.INSTANCE.Read(stream),
            @address: FfiConverterString.INSTANCE.Read(stream),
            @unspent: FfiConverterBoolean.INSTANCE.Read(stream)
        );
    }

    public override int AllocationSize(TxOut value)
    {
        return FfiConverterString.INSTANCE.AllocationSize(value.@txid)
            + FfiConverterUInt32.INSTANCE.AllocationSize(value.@index)
            + FfiConverterUInt64.INSTANCE.AllocationSize(value.@amount)
            + FfiConverterOptionalString.INSTANCE.AllocationSize(value.@colorId)
            + FfiConverterString.INSTANCE.AllocationSize(value.@address)
            + FfiConverterBoolean.INSTANCE.AllocationSize(value.@unspent);
    }

    public override void Write(TxOut value, BigEndianStream stream)
    {
        FfiConverterString.INSTANCE.Write(value.@txid, stream);
        FfiConverterUInt32.INSTANCE.Write(value.@index, stream);
        FfiConverterUInt64.INSTANCE.Write(value.@amount, stream);
        FfiConverterOptionalString.INSTANCE.Write(value.@colorId, stream);
        FfiConverterString.INSTANCE.Write(value.@address, stream);
        FfiConverterBoolean.INSTANCE.Write(value.@unspent, stream);
    }
}

internal enum Network : int
{
    Prod,
    Dev
}

class FfiConverterTypeNetwork : FfiConverterRustBuffer<Network>
{
    public static FfiConverterTypeNetwork INSTANCE = new FfiConverterTypeNetwork();

    public override Network Read(BigEndianStream stream)
    {
        var value = stream.ReadInt() - 1;
        if (Enum.IsDefined(typeof(Network), value))
        {
            return (Network)value;
        }
        else
        {
            throw new InternalException(
                String.Format("invalid enum value '{0}' in FfiConverterTypeNetwork.Read()", value)
            );
        }
    }

    public override int AllocationSize(Network value)
    {
        return 4;
    }

    public override void Write(Network value, BigEndianStream stream)
    {
        stream.WriteInt((int)value + 1);
    }
}

class FfiConverterOptionalBoolean : FfiConverterRustBuffer<bool?>
{
    public static FfiConverterOptionalBoolean INSTANCE = new FfiConverterOptionalBoolean();

    public override bool? Read(BigEndianStream stream)
    {
        if (stream.ReadByte() == 0)
        {
            return null;
        }
        return FfiConverterBoolean.INSTANCE.Read(stream);
    }

    public override int AllocationSize(bool? value)
    {
        if (value == null)
        {
            return 1;
        }
        else
        {
            return 1 + FfiConverterBoolean.INSTANCE.AllocationSize((bool)value);
        }
    }

    public override void Write(bool? value, BigEndianStream stream)
    {
        if (value == null)
        {
            stream.WriteByte(0);
        }
        else
        {
            stream.WriteByte(1);
            FfiConverterBoolean.INSTANCE.Write((bool)value, stream);
        }
    }
}

class FfiConverterOptionalString : FfiConverterRustBuffer<String?>
{
    public static FfiConverterOptionalString INSTANCE = new FfiConverterOptionalString();

    public override String? Read(BigEndianStream stream)
    {
        if (stream.ReadByte() == 0)
        {
            return null;
        }
        return FfiConverterString.INSTANCE.Read(stream);
    }

    public override int AllocationSize(String? value)
    {
        if (value == null)
        {
            return 1;
        }
        else
        {
            return 1 + FfiConverterString.INSTANCE.AllocationSize((String)value);
        }
    }

    public override void Write(String? value, BigEndianStream stream)
    {
        if (value == null)
        {
            stream.WriteByte(0);
        }
        else
        {
            stream.WriteByte(1);
            FfiConverterString.INSTANCE.Write((String)value, stream);
        }
    }
}

class FfiConverterSequenceTypeTransferParams : FfiConverterRustBuffer<List<TransferParams>>
{
    public static FfiConverterSequenceTypeTransferParams INSTANCE =
        new FfiConverterSequenceTypeTransferParams();

    public override List<TransferParams> Read(BigEndianStream stream)
    {
        var length = stream.ReadInt();
        var result = new List<TransferParams>(length);
        for (int i = 0; i < length; i++)
        {
            result.Add(FfiConverterTypeTransferParams.INSTANCE.Read(stream));
        }
        return result;
    }

    public override int AllocationSize(List<TransferParams> value)
    {
        var sizeForLength = 4;

        // details/1-empty-list-as-default-method-parameter.md
        if (value == null)
        {
            return sizeForLength;
        }

        var sizeForItems = value
            .Select(item => FfiConverterTypeTransferParams.INSTANCE.AllocationSize(item))
            .Sum();
        return sizeForLength + sizeForItems;
    }

    public override void Write(List<TransferParams> value, BigEndianStream stream)
    {
        // details/1-empty-list-as-default-method-parameter.md
        if (value == null)
        {
            stream.WriteInt(0);
            return;
        }

        stream.WriteInt(value.Count);
        value.ForEach(item => FfiConverterTypeTransferParams.INSTANCE.Write(item, stream));
    }
}

class FfiConverterSequenceTypeTxOut : FfiConverterRustBuffer<List<TxOut>>
{
    public static FfiConverterSequenceTypeTxOut INSTANCE = new FfiConverterSequenceTypeTxOut();

    public override List<TxOut> Read(BigEndianStream stream)
    {
        var length = stream.ReadInt();
        var result = new List<TxOut>(length);
        for (int i = 0; i < length; i++)
        {
            result.Add(FfiConverterTypeTxOut.INSTANCE.Read(stream));
        }
        return result;
    }

    public override int AllocationSize(List<TxOut> value)
    {
        var sizeForLength = 4;

        // details/1-empty-list-as-default-method-parameter.md
        if (value == null)
        {
            return sizeForLength;
        }

        var sizeForItems = value
            .Select(item => FfiConverterTypeTxOut.INSTANCE.AllocationSize(item))
            .Sum();
        return sizeForLength + sizeForItems;
    }

    public override void Write(List<TxOut> value, BigEndianStream stream)
    {
        // details/1-empty-list-as-default-method-parameter.md
        if (value == null)
        {
            stream.WriteInt(0);
            return;
        }

        stream.WriteInt(value.Count);
        value.ForEach(item => FfiConverterTypeTxOut.INSTANCE.Write(item, stream));
    }
}
#pragma warning restore 8625
internal static class WalletMethods { }
