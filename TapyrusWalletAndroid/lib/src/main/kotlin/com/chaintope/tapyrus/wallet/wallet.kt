// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

@file:Suppress("NAME_SHADOWING")

package com.chaintope.tapyrus.wallet

// Common helper code.
//
// Ideally this would live in a separate .kt file where it can be unittested etc
// in isolation, and perhaps even published as a re-useable package.
//
// However, it's important that the details of how this helper code works (e.g. the
// way that different builtin types are passed across the FFI) exactly match what's
// expected by the Rust code on the other side of the interface. In practice right
// now that means coming from the exact some version of `uniffi` that was used to
// compile the Rust component. The easiest way to ensure this is to bundle the Kotlin
// helpers directly inline like we're doing here.

import com.sun.jna.Library
import com.sun.jna.IntegerType
import com.sun.jna.Native
import com.sun.jna.Pointer
import com.sun.jna.Structure
import com.sun.jna.Callback
import com.sun.jna.ptr.*
import java.nio.ByteBuffer
import java.nio.ByteOrder
import java.nio.CharBuffer
import java.nio.charset.CodingErrorAction
import java.util.concurrent.atomic.AtomicLong
import java.util.concurrent.ConcurrentHashMap
import java.util.concurrent.atomic.AtomicBoolean

// This is a helper for safely working with byte buffers returned from the Rust code.
// A rust-owned buffer is represented by its capacity, its current length, and a
// pointer to the underlying data.

/**
 * @suppress
 */
@Structure.FieldOrder("capacity", "len", "data")
open class RustBuffer : Structure() {
    // Note: `capacity` and `len` are actually `ULong` values, but JVM only supports signed values.
    // When dealing with these fields, make sure to call `toULong()`.
    @JvmField var capacity: Long = 0
    @JvmField var len: Long = 0
    @JvmField var data: Pointer? = null

    class ByValue: RustBuffer(), Structure.ByValue
    class ByReference: RustBuffer(), Structure.ByReference

   internal fun setValue(other: RustBuffer) {
        capacity = other.capacity
        len = other.len
        data = other.data
    }

    companion object {
        internal fun alloc(size: ULong = 0UL) = uniffiRustCall() { status ->
            // Note: need to convert the size to a `Long` value to make this work with JVM.
            UniffiLib.INSTANCE.ffi_tapyrus_wallet_ffi_rustbuffer_alloc(size.toLong(), status)
        }.also {
            if(it.data == null) {
               throw RuntimeException("RustBuffer.alloc() returned null data pointer (size=${size})")
           }
        }

        internal fun create(capacity: ULong, len: ULong, data: Pointer?): RustBuffer.ByValue {
            var buf = RustBuffer.ByValue()
            buf.capacity = capacity.toLong()
            buf.len = len.toLong()
            buf.data = data
            return buf
        }

        internal fun free(buf: RustBuffer.ByValue) = uniffiRustCall() { status ->
            UniffiLib.INSTANCE.ffi_tapyrus_wallet_ffi_rustbuffer_free(buf, status)
        }
    }

    @Suppress("TooGenericExceptionThrown")
    fun asByteBuffer() =
        this.data?.getByteBuffer(0, this.len.toLong())?.also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
}

/**
 * The equivalent of the `*mut RustBuffer` type.
 * Required for callbacks taking in an out pointer.
 *
 * Size is the sum of all values in the struct.
 *
 * @suppress
 */
class RustBufferByReference : ByReference(16) {
    /**
     * Set the pointed-to `RustBuffer` to the given value.
     */
    fun setValue(value: RustBuffer.ByValue) {
        // NOTE: The offsets are as they are in the C-like struct.
        val pointer = getPointer()
        pointer.setLong(0, value.capacity)
        pointer.setLong(8, value.len)
        pointer.setPointer(16, value.data)
    }

    /**
     * Get a `RustBuffer.ByValue` from this reference.
     */
    fun getValue(): RustBuffer.ByValue {
        val pointer = getPointer()
        val value = RustBuffer.ByValue()
        value.writeField("capacity", pointer.getLong(0))
        value.writeField("len", pointer.getLong(8))
        value.writeField("data", pointer.getLong(16))

        return value
    }
}

// This is a helper for safely passing byte references into the rust code.
// It's not actually used at the moment, because there aren't many things that you
// can take a direct pointer to in the JVM, and if we're going to copy something
// then we might as well copy it into a `RustBuffer`. But it's here for API
// completeness.

@Structure.FieldOrder("len", "data")
internal open class ForeignBytes : Structure() {
    @JvmField var len: Int = 0
    @JvmField var data: Pointer? = null

    class ByValue : ForeignBytes(), Structure.ByValue
}
/**
 * The FfiConverter interface handles converter types to and from the FFI
 *
 * All implementing objects should be public to support external types.  When a
 * type is external we need to import it's FfiConverter.
 *
 * @suppress
 */
public interface FfiConverter<KotlinType, FfiType> {
    // Convert an FFI type to a Kotlin type
    fun lift(value: FfiType): KotlinType

    // Convert an Kotlin type to an FFI type
    fun lower(value: KotlinType): FfiType

    // Read a Kotlin type from a `ByteBuffer`
    fun read(buf: ByteBuffer): KotlinType

    // Calculate bytes to allocate when creating a `RustBuffer`
    //
    // This must return at least as many bytes as the write() function will
    // write. It can return more bytes than needed, for example when writing
    // Strings we can't know the exact bytes needed until we the UTF-8
    // encoding, so we pessimistically allocate the largest size possible (3
    // bytes per codepoint).  Allocating extra bytes is not really a big deal
    // because the `RustBuffer` is short-lived.
    fun allocationSize(value: KotlinType): ULong

    // Write a Kotlin type to a `ByteBuffer`
    fun write(value: KotlinType, buf: ByteBuffer)

    // Lower a value into a `RustBuffer`
    //
    // This method lowers a value into a `RustBuffer` rather than the normal
    // FfiType.  It's used by the callback interface code.  Callback interface
    // returns are always serialized into a `RustBuffer` regardless of their
    // normal FFI type.
    fun lowerIntoRustBuffer(value: KotlinType): RustBuffer.ByValue {
        val rbuf = RustBuffer.alloc(allocationSize(value))
        try {
            val bbuf = rbuf.data!!.getByteBuffer(0, rbuf.capacity).also {
                it.order(ByteOrder.BIG_ENDIAN)
            }
            write(value, bbuf)
            rbuf.writeField("len", bbuf.position().toLong())
            return rbuf
        } catch (e: Throwable) {
            RustBuffer.free(rbuf)
            throw e
        }
    }

    // Lift a value from a `RustBuffer`.
    //
    // This here mostly because of the symmetry with `lowerIntoRustBuffer()`.
    // It's currently only used by the `FfiConverterRustBuffer` class below.
    fun liftFromRustBuffer(rbuf: RustBuffer.ByValue): KotlinType {
        val byteBuf = rbuf.asByteBuffer()!!
        try {
           val item = read(byteBuf)
           if (byteBuf.hasRemaining()) {
               throw RuntimeException("junk remaining in buffer after lifting, something is very wrong!!")
           }
           return item
        } finally {
            RustBuffer.free(rbuf)
        }
    }
}

/**
 * FfiConverter that uses `RustBuffer` as the FfiType
 *
 * @suppress
 */
public interface FfiConverterRustBuffer<KotlinType>: FfiConverter<KotlinType, RustBuffer.ByValue> {
    override fun lift(value: RustBuffer.ByValue) = liftFromRustBuffer(value)
    override fun lower(value: KotlinType) = lowerIntoRustBuffer(value)
}
// A handful of classes and functions to support the generated data structures.
// This would be a good candidate for isolating in its own ffi-support lib.

internal const val UNIFFI_CALL_SUCCESS = 0.toByte()
internal const val UNIFFI_CALL_ERROR = 1.toByte()
internal const val UNIFFI_CALL_UNEXPECTED_ERROR = 2.toByte()

@Structure.FieldOrder("code", "error_buf")
internal open class UniffiRustCallStatus : Structure() {
    @JvmField var code: Byte = 0
    @JvmField var error_buf: RustBuffer.ByValue = RustBuffer.ByValue()

    class ByValue: UniffiRustCallStatus(), Structure.ByValue

    fun isSuccess(): Boolean {
        return code == UNIFFI_CALL_SUCCESS
    }

    fun isError(): Boolean {
        return code == UNIFFI_CALL_ERROR
    }

    fun isPanic(): Boolean {
        return code == UNIFFI_CALL_UNEXPECTED_ERROR
    }

    companion object {
        fun create(code: Byte, errorBuf: RustBuffer.ByValue): UniffiRustCallStatus.ByValue {
            val callStatus = UniffiRustCallStatus.ByValue()
            callStatus.code = code
            callStatus.error_buf = errorBuf
            return callStatus
        }
    }
}

class InternalException(message: String) : kotlin.Exception(message)

/**
 * Each top-level error class has a companion object that can lift the error from the call status's rust buffer
 *
 * @suppress
 */
interface UniffiRustCallStatusErrorHandler<E> {
    fun lift(error_buf: RustBuffer.ByValue): E;
}

// Helpers for calling Rust
// In practice we usually need to be synchronized to call this safely, so it doesn't
// synchronize itself

// Call a rust function that returns a Result<>.  Pass in the Error class companion that corresponds to the Err
private inline fun <U, E: kotlin.Exception> uniffiRustCallWithError(errorHandler: UniffiRustCallStatusErrorHandler<E>, callback: (UniffiRustCallStatus) -> U): U {
    var status = UniffiRustCallStatus()
    val return_value = callback(status)
    uniffiCheckCallStatus(errorHandler, status)
    return return_value
}

// Check UniffiRustCallStatus and throw an error if the call wasn't successful
private fun<E: kotlin.Exception> uniffiCheckCallStatus(errorHandler: UniffiRustCallStatusErrorHandler<E>, status: UniffiRustCallStatus) {
    if (status.isSuccess()) {
        return
    } else if (status.isError()) {
        throw errorHandler.lift(status.error_buf)
    } else if (status.isPanic()) {
        // when the rust code sees a panic, it tries to construct a rustbuffer
        // with the message.  but if that code panics, then it just sends back
        // an empty buffer.
        if (status.error_buf.len > 0) {
            throw InternalException(FfiConverterString.lift(status.error_buf))
        } else {
            throw InternalException("Rust panic")
        }
    } else {
        throw InternalException("Unknown rust call status: $status.code")
    }
}

/**
 * UniffiRustCallStatusErrorHandler implementation for times when we don't expect a CALL_ERROR
 *
 * @suppress
 */
object UniffiNullRustCallStatusErrorHandler: UniffiRustCallStatusErrorHandler<InternalException> {
    override fun lift(error_buf: RustBuffer.ByValue): InternalException {
        RustBuffer.free(error_buf)
        return InternalException("Unexpected CALL_ERROR")
    }
}

// Call a rust function that returns a plain value
private inline fun <U> uniffiRustCall(callback: (UniffiRustCallStatus) -> U): U {
    return uniffiRustCallWithError(UniffiNullRustCallStatusErrorHandler, callback)
}

internal inline fun<T> uniffiTraitInterfaceCall(
    callStatus: UniffiRustCallStatus,
    makeCall: () -> T,
    writeReturn: (T) -> Unit,
) {
    try {
        writeReturn(makeCall())
    } catch(e: kotlin.Exception) {
        callStatus.code = UNIFFI_CALL_UNEXPECTED_ERROR
        callStatus.error_buf = FfiConverterString.lower(e.toString())
    }
}

internal inline fun<T, reified E: Throwable> uniffiTraitInterfaceCallWithError(
    callStatus: UniffiRustCallStatus,
    makeCall: () -> T,
    writeReturn: (T) -> Unit,
    lowerError: (E) -> RustBuffer.ByValue
) {
    try {
        writeReturn(makeCall())
    } catch(e: kotlin.Exception) {
        if (e is E) {
            callStatus.code = UNIFFI_CALL_ERROR
            callStatus.error_buf = lowerError(e)
        } else {
            callStatus.code = UNIFFI_CALL_UNEXPECTED_ERROR
            callStatus.error_buf = FfiConverterString.lower(e.toString())
        }
    }
}
// Map handles to objects
//
// This is used pass an opaque 64-bit handle representing a foreign object to the Rust code.
internal class UniffiHandleMap<T: Any> {
    private val map = ConcurrentHashMap<Long, T>()
    private val counter = java.util.concurrent.atomic.AtomicLong(0)

    val size: Int
        get() = map.size

    // Insert a new object into the handle map and get a handle for it
    fun insert(obj: T): Long {
        val handle = counter.getAndAdd(1)
        map.put(handle, obj)
        return handle
    }

    // Get an object from the handle map
    fun get(handle: Long): T {
        return map.get(handle) ?: throw InternalException("UniffiHandleMap.get: Invalid handle")
    }

    // Remove an entry from the handlemap and get the Kotlin object back
    fun remove(handle: Long): T {
        return map.remove(handle) ?: throw InternalException("UniffiHandleMap: Invalid handle")
    }
}

// Contains loading, initialization code,
// and the FFI Function declarations in a com.sun.jna.Library.
@Synchronized
private fun findLibraryName(componentName: String): String {
    val libOverride = System.getProperty("uniffi.component.$componentName.libraryOverride")
    if (libOverride != null) {
        return libOverride
    }
    return "tapyrus_wallet_ffi"
}

private inline fun <reified Lib : Library> loadIndirect(
    componentName: String
): Lib {
    return Native.load<Lib>(findLibraryName(componentName), Lib::class.java)
}

// Define FFI callback types
internal interface UniffiRustFutureContinuationCallback : com.sun.jna.Callback {
    fun callback(`data`: Long,`pollResult`: Byte,)
}
internal interface UniffiForeignFutureFree : com.sun.jna.Callback {
    fun callback(`handle`: Long,)
}
internal interface UniffiCallbackInterfaceFree : com.sun.jna.Callback {
    fun callback(`handle`: Long,)
}
@Structure.FieldOrder("handle", "free")
internal open class UniffiForeignFuture(
    @JvmField internal var `handle`: Long = 0.toLong(),
    @JvmField internal var `free`: UniffiForeignFutureFree? = null,
) : Structure() {
    class UniffiByValue(
        `handle`: Long = 0.toLong(),
        `free`: UniffiForeignFutureFree? = null,
    ): UniffiForeignFuture(`handle`,`free`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFuture) {
        `handle` = other.`handle`
        `free` = other.`free`
    }

}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructU8(
    @JvmField internal var `returnValue`: Byte = 0.toByte(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Byte = 0.toByte(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructU8(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructU8) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteU8 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructU8.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructI8(
    @JvmField internal var `returnValue`: Byte = 0.toByte(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Byte = 0.toByte(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructI8(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructI8) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteI8 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructI8.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructU16(
    @JvmField internal var `returnValue`: Short = 0.toShort(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Short = 0.toShort(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructU16(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructU16) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteU16 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructU16.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructI16(
    @JvmField internal var `returnValue`: Short = 0.toShort(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Short = 0.toShort(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructI16(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructI16) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteI16 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructI16.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructU32(
    @JvmField internal var `returnValue`: Int = 0,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Int = 0,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructU32(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructU32) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteU32 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructU32.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructI32(
    @JvmField internal var `returnValue`: Int = 0,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Int = 0,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructI32(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructI32) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteI32 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructI32.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructU64(
    @JvmField internal var `returnValue`: Long = 0.toLong(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Long = 0.toLong(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructU64(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructU64) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteU64 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructU64.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructI64(
    @JvmField internal var `returnValue`: Long = 0.toLong(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Long = 0.toLong(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructI64(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructI64) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteI64 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructI64.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructF32(
    @JvmField internal var `returnValue`: Float = 0.0f,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Float = 0.0f,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructF32(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructF32) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteF32 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructF32.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructF64(
    @JvmField internal var `returnValue`: Double = 0.0,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Double = 0.0,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructF64(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructF64) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteF64 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructF64.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructPointer(
    @JvmField internal var `returnValue`: Pointer = Pointer.NULL,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Pointer = Pointer.NULL,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructPointer(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructPointer) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompletePointer : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructPointer.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructRustBuffer(
    @JvmField internal var `returnValue`: RustBuffer.ByValue = RustBuffer.ByValue(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: RustBuffer.ByValue = RustBuffer.ByValue(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructRustBuffer(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructRustBuffer) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteRustBuffer : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructRustBuffer.UniffiByValue,)
}
@Structure.FieldOrder("callStatus")
internal open class UniffiForeignFutureStructVoid(
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructVoid(`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructVoid) {
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteVoid : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructVoid.UniffiByValue,)
}






























































































// For large crates we prevent `MethodTooLargeException` (see #2340)
// N.B. the name of the extension is very misleading, since it is 
// rather `InterfaceTooLargeException`, caused by too many methods 
// in the interface for large crates.
//
// By splitting the otherwise huge interface into two parts
// * UniffiLib 
// * IntegrityCheckingUniffiLib (this)
// we allow for ~2x as many methods in the UniffiLib interface.
// 
// The `ffi_uniffi_contract_version` method and all checksum methods are put 
// into `IntegrityCheckingUniffiLib` and these methods are called only once,
// when the library is loaded.
internal interface IntegrityCheckingUniffiLib : Library {
    // Integrity check functions only
    fun uniffi_tapyrus_wallet_ffi_checksum_func_generate_master_key(
): Short
fun uniffi_tapyrus_wallet_ffi_checksum_method_hdwallet_balance(
): Short
fun uniffi_tapyrus_wallet_ffi_checksum_method_hdwallet_calc_p2c_address(
): Short
fun uniffi_tapyrus_wallet_ffi_checksum_method_hdwallet_check_trust_layer_refund(
): Short
fun uniffi_tapyrus_wallet_ffi_checksum_method_hdwallet_full_sync(
): Short
fun uniffi_tapyrus_wallet_ffi_checksum_method_hdwallet_get_new_address(
): Short
fun uniffi_tapyrus_wallet_ffi_checksum_method_hdwallet_get_transaction(
): Short
fun uniffi_tapyrus_wallet_ffi_checksum_method_hdwallet_get_tx_out_by_address(
): Short
fun uniffi_tapyrus_wallet_ffi_checksum_method_hdwallet_sign_message(
): Short
fun uniffi_tapyrus_wallet_ffi_checksum_method_hdwallet_store_contract(
): Short
fun uniffi_tapyrus_wallet_ffi_checksum_method_hdwallet_sync(
): Short
fun uniffi_tapyrus_wallet_ffi_checksum_method_hdwallet_transfer(
): Short
fun uniffi_tapyrus_wallet_ffi_checksum_method_hdwallet_update_contract(
): Short
fun uniffi_tapyrus_wallet_ffi_checksum_method_hdwallet_verify_sign(
): Short
fun uniffi_tapyrus_wallet_ffi_checksum_constructor_config_new(
): Short
fun uniffi_tapyrus_wallet_ffi_checksum_constructor_hdwallet_new(
): Short
fun ffi_tapyrus_wallet_ffi_uniffi_contract_version(
): Int

}

// A JNA Library to expose the extern-C FFI definitions.
// This is an implementation detail which will be called internally by the public API.
internal interface UniffiLib : Library {
    companion object {
        internal val INSTANCE: UniffiLib by lazy {
            val componentName = "wallet"
            // For large crates we prevent `MethodTooLargeException` (see #2340)
            // N.B. the name of the extension is very misleading, since it is 
            // rather `InterfaceTooLargeException`, caused by too many methods 
            // in the interface for large crates.
            //
            // By splitting the otherwise huge interface into two parts
            // * UniffiLib (this)
            // * IntegrityCheckingUniffiLib
            // And all checksum methods are put into `IntegrityCheckingUniffiLib`
            // we allow for ~2x as many methods in the UniffiLib interface.
            // 
            // Thus we first load the library with `loadIndirect` as `IntegrityCheckingUniffiLib`
            // so that we can (optionally!) call `uniffiCheckApiChecksums`...
            loadIndirect<IntegrityCheckingUniffiLib>(componentName)
                .also { lib: IntegrityCheckingUniffiLib ->
                    uniffiCheckContractApiVersion(lib)
                    uniffiCheckApiChecksums(lib)
                }
            // ... and then we load the library as `UniffiLib`
            // N.B. we cannot use `loadIndirect` once and then try to cast it to `UniffiLib`
            // => results in `java.lang.ClassCastException: com.sun.proxy.$Proxy cannot be cast to ...`
            // error. So we must call `loadIndirect` twice. For crates large enough
            // to trigger this issue, the performance impact is negligible, running on
            // a macOS M1 machine the `loadIndirect` call takes ~50ms.
            val lib = loadIndirect<UniffiLib>(componentName)
            // No need to check the contract version and checksums, since 
            // we already did that with `IntegrityCheckingUniffiLib` above.
            // Loading of library with integrity check done.
            lib
        }
        
        // The Cleaner for the whole library
        internal val CLEANER: UniffiCleaner by lazy {
            UniffiCleaner.create()
        }
    }

    // FFI functions
    fun uniffi_tapyrus_wallet_ffi_fn_clone_config(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
): Pointer
fun uniffi_tapyrus_wallet_ffi_fn_free_config(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
): Unit
fun uniffi_tapyrus_wallet_ffi_fn_constructor_config_new(`networkMode`: RustBuffer.ByValue,`networkId`: Int,`genesisHash`: RustBuffer.ByValue,`esploraUrl`: RustBuffer.ByValue,`esploraUser`: RustBuffer.ByValue,`esploraPassword`: RustBuffer.ByValue,`masterKeyPath`: RustBuffer.ByValue,`masterKey`: RustBuffer.ByValue,`dbFilePath`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
): Pointer
fun uniffi_tapyrus_wallet_ffi_fn_clone_hdwallet(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
): Pointer
fun uniffi_tapyrus_wallet_ffi_fn_free_hdwallet(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
): Unit
fun uniffi_tapyrus_wallet_ffi_fn_constructor_hdwallet_new(`config`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
): Pointer
fun uniffi_tapyrus_wallet_ffi_fn_method_hdwallet_balance(`ptr`: Pointer,`colorId`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
): Long
fun uniffi_tapyrus_wallet_ffi_fn_method_hdwallet_calc_p2c_address(`ptr`: Pointer,`publicKey`: RustBuffer.ByValue,`contract`: RustBuffer.ByValue,`colorId`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
fun uniffi_tapyrus_wallet_ffi_fn_method_hdwallet_check_trust_layer_refund(`ptr`: Pointer,`txid`: RustBuffer.ByValue,`colorId`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
): Long
fun uniffi_tapyrus_wallet_ffi_fn_method_hdwallet_full_sync(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
): Unit
fun uniffi_tapyrus_wallet_ffi_fn_method_hdwallet_get_new_address(`ptr`: Pointer,`colorId`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
fun uniffi_tapyrus_wallet_ffi_fn_method_hdwallet_get_transaction(`ptr`: Pointer,`txid`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
fun uniffi_tapyrus_wallet_ffi_fn_method_hdwallet_get_tx_out_by_address(`ptr`: Pointer,`tx`: RustBuffer.ByValue,`address`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
fun uniffi_tapyrus_wallet_ffi_fn_method_hdwallet_sign_message(`ptr`: Pointer,`publicKey`: RustBuffer.ByValue,`message`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
fun uniffi_tapyrus_wallet_ffi_fn_method_hdwallet_store_contract(`ptr`: Pointer,`contract`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
fun uniffi_tapyrus_wallet_ffi_fn_method_hdwallet_sync(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
): Unit
fun uniffi_tapyrus_wallet_ffi_fn_method_hdwallet_transfer(`ptr`: Pointer,`params`: RustBuffer.ByValue,`utxos`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
fun uniffi_tapyrus_wallet_ffi_fn_method_hdwallet_update_contract(`ptr`: Pointer,`contractId`: RustBuffer.ByValue,`payable`: Byte,uniffi_out_err: UniffiRustCallStatus, 
): Unit
fun uniffi_tapyrus_wallet_ffi_fn_method_hdwallet_verify_sign(`ptr`: Pointer,`publicKey`: RustBuffer.ByValue,`message`: RustBuffer.ByValue,`signature`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
): Byte
fun uniffi_tapyrus_wallet_ffi_fn_func_generate_master_key(`networkMode`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
fun ffi_tapyrus_wallet_ffi_rustbuffer_alloc(`size`: Long,uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
fun ffi_tapyrus_wallet_ffi_rustbuffer_from_bytes(`bytes`: ForeignBytes.ByValue,uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
fun ffi_tapyrus_wallet_ffi_rustbuffer_free(`buf`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
): Unit
fun ffi_tapyrus_wallet_ffi_rustbuffer_reserve(`buf`: RustBuffer.ByValue,`additional`: Long,uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
fun ffi_tapyrus_wallet_ffi_rust_future_poll_u8(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_tapyrus_wallet_ffi_rust_future_cancel_u8(`handle`: Long,
): Unit
fun ffi_tapyrus_wallet_ffi_rust_future_free_u8(`handle`: Long,
): Unit
fun ffi_tapyrus_wallet_ffi_rust_future_complete_u8(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Byte
fun ffi_tapyrus_wallet_ffi_rust_future_poll_i8(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_tapyrus_wallet_ffi_rust_future_cancel_i8(`handle`: Long,
): Unit
fun ffi_tapyrus_wallet_ffi_rust_future_free_i8(`handle`: Long,
): Unit
fun ffi_tapyrus_wallet_ffi_rust_future_complete_i8(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Byte
fun ffi_tapyrus_wallet_ffi_rust_future_poll_u16(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_tapyrus_wallet_ffi_rust_future_cancel_u16(`handle`: Long,
): Unit
fun ffi_tapyrus_wallet_ffi_rust_future_free_u16(`handle`: Long,
): Unit
fun ffi_tapyrus_wallet_ffi_rust_future_complete_u16(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Short
fun ffi_tapyrus_wallet_ffi_rust_future_poll_i16(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_tapyrus_wallet_ffi_rust_future_cancel_i16(`handle`: Long,
): Unit
fun ffi_tapyrus_wallet_ffi_rust_future_free_i16(`handle`: Long,
): Unit
fun ffi_tapyrus_wallet_ffi_rust_future_complete_i16(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Short
fun ffi_tapyrus_wallet_ffi_rust_future_poll_u32(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_tapyrus_wallet_ffi_rust_future_cancel_u32(`handle`: Long,
): Unit
fun ffi_tapyrus_wallet_ffi_rust_future_free_u32(`handle`: Long,
): Unit
fun ffi_tapyrus_wallet_ffi_rust_future_complete_u32(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Int
fun ffi_tapyrus_wallet_ffi_rust_future_poll_i32(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_tapyrus_wallet_ffi_rust_future_cancel_i32(`handle`: Long,
): Unit
fun ffi_tapyrus_wallet_ffi_rust_future_free_i32(`handle`: Long,
): Unit
fun ffi_tapyrus_wallet_ffi_rust_future_complete_i32(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Int
fun ffi_tapyrus_wallet_ffi_rust_future_poll_u64(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_tapyrus_wallet_ffi_rust_future_cancel_u64(`handle`: Long,
): Unit
fun ffi_tapyrus_wallet_ffi_rust_future_free_u64(`handle`: Long,
): Unit
fun ffi_tapyrus_wallet_ffi_rust_future_complete_u64(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Long
fun ffi_tapyrus_wallet_ffi_rust_future_poll_i64(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_tapyrus_wallet_ffi_rust_future_cancel_i64(`handle`: Long,
): Unit
fun ffi_tapyrus_wallet_ffi_rust_future_free_i64(`handle`: Long,
): Unit
fun ffi_tapyrus_wallet_ffi_rust_future_complete_i64(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Long
fun ffi_tapyrus_wallet_ffi_rust_future_poll_f32(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_tapyrus_wallet_ffi_rust_future_cancel_f32(`handle`: Long,
): Unit
fun ffi_tapyrus_wallet_ffi_rust_future_free_f32(`handle`: Long,
): Unit
fun ffi_tapyrus_wallet_ffi_rust_future_complete_f32(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Float
fun ffi_tapyrus_wallet_ffi_rust_future_poll_f64(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_tapyrus_wallet_ffi_rust_future_cancel_f64(`handle`: Long,
): Unit
fun ffi_tapyrus_wallet_ffi_rust_future_free_f64(`handle`: Long,
): Unit
fun ffi_tapyrus_wallet_ffi_rust_future_complete_f64(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Double
fun ffi_tapyrus_wallet_ffi_rust_future_poll_pointer(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_tapyrus_wallet_ffi_rust_future_cancel_pointer(`handle`: Long,
): Unit
fun ffi_tapyrus_wallet_ffi_rust_future_free_pointer(`handle`: Long,
): Unit
fun ffi_tapyrus_wallet_ffi_rust_future_complete_pointer(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Pointer
fun ffi_tapyrus_wallet_ffi_rust_future_poll_rust_buffer(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_tapyrus_wallet_ffi_rust_future_cancel_rust_buffer(`handle`: Long,
): Unit
fun ffi_tapyrus_wallet_ffi_rust_future_free_rust_buffer(`handle`: Long,
): Unit
fun ffi_tapyrus_wallet_ffi_rust_future_complete_rust_buffer(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
fun ffi_tapyrus_wallet_ffi_rust_future_poll_void(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_tapyrus_wallet_ffi_rust_future_cancel_void(`handle`: Long,
): Unit
fun ffi_tapyrus_wallet_ffi_rust_future_free_void(`handle`: Long,
): Unit
fun ffi_tapyrus_wallet_ffi_rust_future_complete_void(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Unit

}

private fun uniffiCheckContractApiVersion(lib: IntegrityCheckingUniffiLib) {
    // Get the bindings contract version from our ComponentInterface
    val bindings_contract_version = 29
    // Get the scaffolding contract version by calling the into the dylib
    val scaffolding_contract_version = lib.ffi_tapyrus_wallet_ffi_uniffi_contract_version()
    if (bindings_contract_version != scaffolding_contract_version) {
        throw RuntimeException("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    }
}
@Suppress("UNUSED_PARAMETER")
private fun uniffiCheckApiChecksums(lib: IntegrityCheckingUniffiLib) {
    if (lib.uniffi_tapyrus_wallet_ffi_checksum_func_generate_master_key() != 28023.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_tapyrus_wallet_ffi_checksum_method_hdwallet_balance() != 45107.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_tapyrus_wallet_ffi_checksum_method_hdwallet_calc_p2c_address() != 1430.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_tapyrus_wallet_ffi_checksum_method_hdwallet_check_trust_layer_refund() != 10245.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_tapyrus_wallet_ffi_checksum_method_hdwallet_full_sync() != 9565.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_tapyrus_wallet_ffi_checksum_method_hdwallet_get_new_address() != 57092.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_tapyrus_wallet_ffi_checksum_method_hdwallet_get_transaction() != 41521.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_tapyrus_wallet_ffi_checksum_method_hdwallet_get_tx_out_by_address() != 63947.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_tapyrus_wallet_ffi_checksum_method_hdwallet_sign_message() != 45881.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_tapyrus_wallet_ffi_checksum_method_hdwallet_store_contract() != 30217.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_tapyrus_wallet_ffi_checksum_method_hdwallet_sync() != 29642.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_tapyrus_wallet_ffi_checksum_method_hdwallet_transfer() != 55148.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_tapyrus_wallet_ffi_checksum_method_hdwallet_update_contract() != 18064.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_tapyrus_wallet_ffi_checksum_method_hdwallet_verify_sign() != 5050.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_tapyrus_wallet_ffi_checksum_constructor_config_new() != 46068.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_tapyrus_wallet_ffi_checksum_constructor_hdwallet_new() != 32676.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

/**
 * @suppress
 */
public fun uniffiEnsureInitialized() {
    UniffiLib.INSTANCE
}

// Async support

// Public interface members begin here.


// Interface implemented by anything that can contain an object reference.
//
// Such types expose a `destroy()` method that must be called to cleanly
// dispose of the contained objects. Failure to call this method may result
// in memory leaks.
//
// The easiest way to ensure this method is called is to use the `.use`
// helper method to execute a block and destroy the object at the end.
interface Disposable {
    fun destroy()
    companion object {
        fun destroy(vararg args: Any?) {
            args.filterIsInstance<Disposable>()
                .forEach(Disposable::destroy)
        }
    }
}

/**
 * @suppress
 */
inline fun <T : Disposable?, R> T.use(block: (T) -> R) =
    try {
        block(this)
    } finally {
        try {
            // N.B. our implementation is on the nullable type `Disposable?`.
            this?.destroy()
        } catch (e: Throwable) {
            // swallow
        }
    }

/** 
 * Used to instantiate an interface without an actual pointer, for fakes in tests, mostly.
 *
 * @suppress
 * */
object NoPointer

/**
 * @suppress
 */
public object FfiConverterUInt: FfiConverter<UInt, Int> {
    override fun lift(value: Int): UInt {
        return value.toUInt()
    }

    override fun read(buf: ByteBuffer): UInt {
        return lift(buf.getInt())
    }

    override fun lower(value: UInt): Int {
        return value.toInt()
    }

    override fun allocationSize(value: UInt) = 4UL

    override fun write(value: UInt, buf: ByteBuffer) {
        buf.putInt(value.toInt())
    }
}

/**
 * @suppress
 */
public object FfiConverterULong: FfiConverter<ULong, Long> {
    override fun lift(value: Long): ULong {
        return value.toULong()
    }

    override fun read(buf: ByteBuffer): ULong {
        return lift(buf.getLong())
    }

    override fun lower(value: ULong): Long {
        return value.toLong()
    }

    override fun allocationSize(value: ULong) = 8UL

    override fun write(value: ULong, buf: ByteBuffer) {
        buf.putLong(value.toLong())
    }
}

/**
 * @suppress
 */
public object FfiConverterBoolean: FfiConverter<Boolean, Byte> {
    override fun lift(value: Byte): Boolean {
        return value.toInt() != 0
    }

    override fun read(buf: ByteBuffer): Boolean {
        return lift(buf.get())
    }

    override fun lower(value: Boolean): Byte {
        return if (value) 1.toByte() else 0.toByte()
    }

    override fun allocationSize(value: Boolean) = 1UL

    override fun write(value: Boolean, buf: ByteBuffer) {
        buf.put(lower(value))
    }
}

/**
 * @suppress
 */
public object FfiConverterString: FfiConverter<String, RustBuffer.ByValue> {
    // Note: we don't inherit from FfiConverterRustBuffer, because we use a
    // special encoding when lowering/lifting.  We can use `RustBuffer.len` to
    // store our length and avoid writing it out to the buffer.
    override fun lift(value: RustBuffer.ByValue): String {
        try {
            val byteArr = ByteArray(value.len.toInt())
            value.asByteBuffer()!!.get(byteArr)
            return byteArr.toString(Charsets.UTF_8)
        } finally {
            RustBuffer.free(value)
        }
    }

    override fun read(buf: ByteBuffer): String {
        val len = buf.getInt()
        val byteArr = ByteArray(len)
        buf.get(byteArr)
        return byteArr.toString(Charsets.UTF_8)
    }

    fun toUtf8(value: String): ByteBuffer {
        // Make sure we don't have invalid UTF-16, check for lone surrogates.
        return Charsets.UTF_8.newEncoder().run {
            onMalformedInput(CodingErrorAction.REPORT)
            encode(CharBuffer.wrap(value))
        }
    }

    override fun lower(value: String): RustBuffer.ByValue {
        val byteBuf = toUtf8(value)
        // Ideally we'd pass these bytes to `ffi_bytebuffer_from_bytes`, but doing so would require us
        // to copy them into a JNA `Memory`. So we might as well directly copy them into a `RustBuffer`.
        val rbuf = RustBuffer.alloc(byteBuf.limit().toULong())
        rbuf.asByteBuffer()!!.put(byteBuf)
        return rbuf
    }

    // We aren't sure exactly how many bytes our string will be once it's UTF-8
    // encoded.  Allocate 3 bytes per UTF-16 code unit which will always be
    // enough.
    override fun allocationSize(value: String): ULong {
        val sizeForLength = 4UL
        val sizeForString = value.length.toULong() * 3UL
        return sizeForLength + sizeForString
    }

    override fun write(value: String, buf: ByteBuffer) {
        val byteBuf = toUtf8(value)
        buf.putInt(byteBuf.limit())
        buf.put(byteBuf)
    }
}


// This template implements a class for working with a Rust struct via a Pointer/Arc<T>
// to the live Rust struct on the other side of the FFI.
//
// Each instance implements core operations for working with the Rust `Arc<T>` and the
// Kotlin Pointer to work with the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// theq Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an instance is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so risks
//     leaking the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
//   * To mitigate many of the risks of leaking memory and use-after-free unsafety, a `Cleaner`
//     is implemented to call the destructor when the Kotlin object becomes unreachable.
//     This is done in a background thread. This is not a panacea, and client code should be aware that
//      1. the thread may starve if some there are objects that have poorly performing
//     `drop` methods or do significant work in their `drop` methods.
//      2. the thread is shared across the whole library. This can be tuned by using `android_cleaner = true`,
//         or `android = true` in the [`kotlin` section of the `uniffi.toml` file](https://mozilla.github.io/uniffi-rs/kotlin/configuration.html).
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each instance an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// This makes a cleaner a better alternative to _not_ calling `destroy()` as
// and when the object is finished with, but the abstraction is not perfect: if the Rust object's `drop`
// method is slow, and/or there are many objects to cleanup, and it's on a low end Android device, then the cleaner
// thread may be starved, and the app will leak memory.
//
// In this case, `destroy`ing manually may be a better solution.
//
// The cleaner can live side by side with the manual calling of `destroy`. In the order of responsiveness, uniffi objects
// with Rust peers are reclaimed:
//
// 1. By calling the `destroy` method of the object, which calls `rustObject.free()`. If that doesn't happen:
// 2. When the object becomes unreachable, AND the Cleaner thread gets to call `rustObject.free()`. If the thread is starved then:
// 3. The memory is reclaimed when the process terminates.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//


/**
 * The cleaner interface for Object finalization code to run.
 * This is the entry point to any implementation that we're using.
 *
 * The cleaner registers objects and returns cleanables, so now we are
 * defining a `UniffiCleaner` with a `UniffiClenaer.Cleanable` to abstract the
 * different implmentations available at compile time.
 *
 * @suppress
 */
interface UniffiCleaner {
    interface Cleanable {
        fun clean()
    }

    fun register(value: Any, cleanUpTask: Runnable): UniffiCleaner.Cleanable

    companion object
}

// The fallback Jna cleaner, which is available for both Android, and the JVM.
private class UniffiJnaCleaner : UniffiCleaner {
    private val cleaner = com.sun.jna.internal.Cleaner.getCleaner()

    override fun register(value: Any, cleanUpTask: Runnable): UniffiCleaner.Cleanable =
        UniffiJnaCleanable(cleaner.register(value, cleanUpTask))
}

private class UniffiJnaCleanable(
    private val cleanable: com.sun.jna.internal.Cleaner.Cleanable,
) : UniffiCleaner.Cleanable {
    override fun clean() = cleanable.clean()
}


// We decide at uniffi binding generation time whether we were
// using Android or not.
// There are further runtime checks to chose the correct implementation
// of the cleaner.
private fun UniffiCleaner.Companion.create(): UniffiCleaner =
    try {
        // For safety's sake: if the library hasn't been run in android_cleaner = true
        // mode, but is being run on Android, then we still need to think about
        // Android API versions.
        // So we check if java.lang.ref.Cleaner is there, and use that…
        java.lang.Class.forName("java.lang.ref.Cleaner")
        JavaLangRefCleaner()
    } catch (e: ClassNotFoundException) {
        // … otherwise, fallback to the JNA cleaner.
        UniffiJnaCleaner()
    }

private class JavaLangRefCleaner : UniffiCleaner {
    val cleaner = java.lang.ref.Cleaner.create()

    override fun register(value: Any, cleanUpTask: Runnable): UniffiCleaner.Cleanable =
        JavaLangRefCleanable(cleaner.register(value, cleanUpTask))
}

private class JavaLangRefCleanable(
    val cleanable: java.lang.ref.Cleaner.Cleanable
) : UniffiCleaner.Cleanable {
    override fun clean() = cleanable.clean()
}
/**
 * The tapyrus wallet configuration
 */
public interface ConfigInterface {
    
    companion object
}

/**
 * The tapyrus wallet configuration
 */
open class Config: Disposable, AutoCloseable, ConfigInterface
{

    constructor(pointer: Pointer) {
        this.pointer = pointer
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    /**
     * This constructor can be used to instantiate a fake object. Only used for tests. Any
     * attempt to actually use an object constructed this way will fail as there is no
     * connected Rust object.
     */
    @Suppress("UNUSED_PARAMETER")
    constructor(noPointer: NoPointer) {
        this.pointer = null
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }
    /**
     * Create a new Config instance
     * Arguments:
     * - network_mode: The tapyrus network mode the wallet is connected to.
     * - network_id: The network id of the tapyrus network the wallet is connected to.
     * - genesis_hash: The genesis block hash of the tapyrus network the wallet is connected to.
     * - esplora_url: The esplora URL to connect to.
     * - esplora_user: The esplora basic authentication user to connect to.
     * - esplora_password: The esplora basic authentication password to connect to.
     * - master_key_path: The master key path to load the wallet from.
     * - master_key: The master key base58 encode string.
     * - db_file_path: The wallet db file path to load the wallet from.
     */
    constructor(`networkMode`: Network, `networkId`: kotlin.UInt, `genesisHash`: kotlin.String, `esploraUrl`: kotlin.String, `esploraUser`: kotlin.String? = null, `esploraPassword`: kotlin.String? = null, `masterKeyPath`: kotlin.String? = null, `masterKey`: kotlin.String? = null, `dbFilePath`: kotlin.String? = null) :
        this(
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_tapyrus_wallet_ffi_fn_constructor_config_new(
        FfiConverterTypeNetwork.lower(`networkMode`),FfiConverterUInt.lower(`networkId`),FfiConverterString.lower(`genesisHash`),FfiConverterString.lower(`esploraUrl`),FfiConverterOptionalString.lower(`esploraUser`),FfiConverterOptionalString.lower(`esploraPassword`),FfiConverterOptionalString.lower(`masterKeyPath`),FfiConverterOptionalString.lower(`masterKey`),FfiConverterOptionalString.lower(`dbFilePath`),_status)
}
    )

    protected val pointer: Pointer?
    protected val cleanable: UniffiCleaner.Cleanable

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (! this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.uniffiClonePointer())
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val pointer: Pointer?) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_tapyrus_wallet_ffi_fn_free_config(ptr, status)
                }
            }
        }
    }

    fun uniffiClonePointer(): Pointer {
        return uniffiRustCall() { status ->
            UniffiLib.INSTANCE.uniffi_tapyrus_wallet_ffi_fn_clone_config(pointer!!, status)
        }
    }

    

    
    
    companion object
    
}

/**
 * @suppress
 */
public object FfiConverterTypeConfig: FfiConverter<Config, Pointer> {

    override fun lower(value: Config): Pointer {
        return value.uniffiClonePointer()
    }

    override fun lift(value: Pointer): Config {
        return Config(value)
    }

    override fun read(buf: ByteBuffer): Config {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: Config) = 8UL

    override fun write(value: Config, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}


// This template implements a class for working with a Rust struct via a Pointer/Arc<T>
// to the live Rust struct on the other side of the FFI.
//
// Each instance implements core operations for working with the Rust `Arc<T>` and the
// Kotlin Pointer to work with the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// theq Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an instance is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so risks
//     leaking the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
//   * To mitigate many of the risks of leaking memory and use-after-free unsafety, a `Cleaner`
//     is implemented to call the destructor when the Kotlin object becomes unreachable.
//     This is done in a background thread. This is not a panacea, and client code should be aware that
//      1. the thread may starve if some there are objects that have poorly performing
//     `drop` methods or do significant work in their `drop` methods.
//      2. the thread is shared across the whole library. This can be tuned by using `android_cleaner = true`,
//         or `android = true` in the [`kotlin` section of the `uniffi.toml` file](https://mozilla.github.io/uniffi-rs/kotlin/configuration.html).
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each instance an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// This makes a cleaner a better alternative to _not_ calling `destroy()` as
// and when the object is finished with, but the abstraction is not perfect: if the Rust object's `drop`
// method is slow, and/or there are many objects to cleanup, and it's on a low end Android device, then the cleaner
// thread may be starved, and the app will leak memory.
//
// In this case, `destroy`ing manually may be a better solution.
//
// The cleaner can live side by side with the manual calling of `destroy`. In the order of responsiveness, uniffi objects
// with Rust peers are reclaimed:
//
// 1. By calling the `destroy` method of the object, which calls `rustObject.free()`. If that doesn't happen:
// 2. When the object becomes unreachable, AND the Cleaner thread gets to call `rustObject.free()`. If the thread is starved then:
// 3. The memory is reclaimed when the process terminates.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//


/**
 * The HDWallet
 */
public interface HdWalletInterface {
    
    /**
     * Get the balance of the wallet
     */
    fun `balance`(`colorId`: kotlin.String?): kotlin.ULong
    
    /**
     * Get the pay to contract address
     */
    fun `calcP2cAddress`(`publicKey`: kotlin.String, `contract`: kotlin.String, `colorId`: kotlin.String?): kotlin.String
    
    /**
     * Check the trust layer refund transaction and return amount of the refund token
     * - txid: The transaction id to transfer token to email receiver wallet
     * - color_id: The color id of the token
     */
    fun `checkTrustLayerRefund`(`txid`: kotlin.String, `colorId`: kotlin.String): kotlin.ULong
    
    /**
     * Full sync the wallet with esplora
     * This method will sync the wallet from the genesis block
     */
    fun `fullSync`()
    
    /**
     * Get a new address
     */
    fun `getNewAddress`(`colorId`: kotlin.String?): GetNewAddressResult
    
    /**
     * Get the transaction by the txid
     */
    fun `getTransaction`(`txid`: kotlin.String): kotlin.String
    
    /**
     * Get the transaction by the txid
     */
    fun `getTxOutByAddress`(`tx`: kotlin.String, `address`: kotlin.String): List<TxOut>
    
    /**
     * Sign the message
     */
    fun `signMessage`(`publicKey`: kotlin.String, `message`: kotlin.String): kotlin.String
    
    /**
     * Store the contract
     */
    fun `storeContract`(`contract`: Contract): Contract
    
    /**
     * Sync the wallet with the esplora
     */
    fun `sync`()
    
    /**
     * Transfer the amount to the address
     */
    fun `transfer`(`params`: List<TransferParams>, `utxos`: List<TxOut>): kotlin.String
    
    /**
     * Update the contract payable
     */
    fun `updateContract`(`contractId`: kotlin.String, `payable`: kotlin.Boolean)
    
    /**
     * Verify the signature
     */
    fun `verifySign`(`publicKey`: kotlin.String, `message`: kotlin.String, `signature`: kotlin.String): kotlin.Boolean
    
    companion object
}

/**
 * The HDWallet
 */
open class HdWallet: Disposable, AutoCloseable, HdWalletInterface
{

    constructor(pointer: Pointer) {
        this.pointer = pointer
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    /**
     * This constructor can be used to instantiate a fake object. Only used for tests. Any
     * attempt to actually use an object constructed this way will fail as there is no
     * connected Rust object.
     */
    @Suppress("UNUSED_PARAMETER")
    constructor(noPointer: NoPointer) {
        this.pointer = null
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }
    /**
     * Create a new HDWallet instance
     */
    constructor(`config`: Config) :
        this(
    uniffiRustCallWithError(NewException) { _status ->
    UniffiLib.INSTANCE.uniffi_tapyrus_wallet_ffi_fn_constructor_hdwallet_new(
        FfiConverterTypeConfig.lower(`config`),_status)
}
    )

    protected val pointer: Pointer?
    protected val cleanable: UniffiCleaner.Cleanable

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (! this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.uniffiClonePointer())
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val pointer: Pointer?) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_tapyrus_wallet_ffi_fn_free_hdwallet(ptr, status)
                }
            }
        }
    }

    fun uniffiClonePointer(): Pointer {
        return uniffiRustCall() { status ->
            UniffiLib.INSTANCE.uniffi_tapyrus_wallet_ffi_fn_clone_hdwallet(pointer!!, status)
        }
    }

    
    /**
     * Get the balance of the wallet
     */
    @Throws(BalanceException::class)override fun `balance`(`colorId`: kotlin.String?): kotlin.ULong {
            return FfiConverterULong.lift(
    callWithPointer {
    uniffiRustCallWithError(BalanceException) { _status ->
    UniffiLib.INSTANCE.uniffi_tapyrus_wallet_ffi_fn_method_hdwallet_balance(
        it, FfiConverterOptionalString.lower(`colorId`),_status)
}
    }
    )
    }
    

    
    /**
     * Get the pay to contract address
     */
    @Throws(CalcPayToContractAddressException::class)override fun `calcP2cAddress`(`publicKey`: kotlin.String, `contract`: kotlin.String, `colorId`: kotlin.String?): kotlin.String {
            return FfiConverterString.lift(
    callWithPointer {
    uniffiRustCallWithError(CalcPayToContractAddressException) { _status ->
    UniffiLib.INSTANCE.uniffi_tapyrus_wallet_ffi_fn_method_hdwallet_calc_p2c_address(
        it, FfiConverterString.lower(`publicKey`),FfiConverterString.lower(`contract`),FfiConverterOptionalString.lower(`colorId`),_status)
}
    }
    )
    }
    

    
    /**
     * Check the trust layer refund transaction and return amount of the refund token
     * - txid: The transaction id to transfer token to email receiver wallet
     * - color_id: The color id of the token
     */
    @Throws(CheckTrustLayerRefundException::class)override fun `checkTrustLayerRefund`(`txid`: kotlin.String, `colorId`: kotlin.String): kotlin.ULong {
            return FfiConverterULong.lift(
    callWithPointer {
    uniffiRustCallWithError(CheckTrustLayerRefundException) { _status ->
    UniffiLib.INSTANCE.uniffi_tapyrus_wallet_ffi_fn_method_hdwallet_check_trust_layer_refund(
        it, FfiConverterString.lower(`txid`),FfiConverterString.lower(`colorId`),_status)
}
    }
    )
    }
    

    
    /**
     * Full sync the wallet with esplora
     * This method will sync the wallet from the genesis block
     */
    @Throws(SyncException::class)override fun `fullSync`()
        = 
    callWithPointer {
    uniffiRustCallWithError(SyncException) { _status ->
    UniffiLib.INSTANCE.uniffi_tapyrus_wallet_ffi_fn_method_hdwallet_full_sync(
        it, _status)
}
    }
    
    

    
    /**
     * Get a new address
     */
    @Throws(GetNewAddressException::class)override fun `getNewAddress`(`colorId`: kotlin.String?): GetNewAddressResult {
            return FfiConverterTypeGetNewAddressResult.lift(
    callWithPointer {
    uniffiRustCallWithError(GetNewAddressException) { _status ->
    UniffiLib.INSTANCE.uniffi_tapyrus_wallet_ffi_fn_method_hdwallet_get_new_address(
        it, FfiConverterOptionalString.lower(`colorId`),_status)
}
    }
    )
    }
    

    
    /**
     * Get the transaction by the txid
     */
    @Throws(GetTransactionException::class)override fun `getTransaction`(`txid`: kotlin.String): kotlin.String {
            return FfiConverterString.lift(
    callWithPointer {
    uniffiRustCallWithError(GetTransactionException) { _status ->
    UniffiLib.INSTANCE.uniffi_tapyrus_wallet_ffi_fn_method_hdwallet_get_transaction(
        it, FfiConverterString.lower(`txid`),_status)
}
    }
    )
    }
    

    
    /**
     * Get the transaction by the txid
     */
    @Throws(GetTxOutByAddressException::class)override fun `getTxOutByAddress`(`tx`: kotlin.String, `address`: kotlin.String): List<TxOut> {
            return FfiConverterSequenceTypeTxOut.lift(
    callWithPointer {
    uniffiRustCallWithError(GetTxOutByAddressException) { _status ->
    UniffiLib.INSTANCE.uniffi_tapyrus_wallet_ffi_fn_method_hdwallet_get_tx_out_by_address(
        it, FfiConverterString.lower(`tx`),FfiConverterString.lower(`address`),_status)
}
    }
    )
    }
    

    
    /**
     * Sign the message
     */
    @Throws(SignMessageException::class)override fun `signMessage`(`publicKey`: kotlin.String, `message`: kotlin.String): kotlin.String {
            return FfiConverterString.lift(
    callWithPointer {
    uniffiRustCallWithError(SignMessageException) { _status ->
    UniffiLib.INSTANCE.uniffi_tapyrus_wallet_ffi_fn_method_hdwallet_sign_message(
        it, FfiConverterString.lower(`publicKey`),FfiConverterString.lower(`message`),_status)
}
    }
    )
    }
    

    
    /**
     * Store the contract
     */
    @Throws(StoreContractException::class)override fun `storeContract`(`contract`: Contract): Contract {
            return FfiConverterTypeContract.lift(
    callWithPointer {
    uniffiRustCallWithError(StoreContractException) { _status ->
    UniffiLib.INSTANCE.uniffi_tapyrus_wallet_ffi_fn_method_hdwallet_store_contract(
        it, FfiConverterTypeContract.lower(`contract`),_status)
}
    }
    )
    }
    

    
    /**
     * Sync the wallet with the esplora
     */
    @Throws(SyncException::class)override fun `sync`()
        = 
    callWithPointer {
    uniffiRustCallWithError(SyncException) { _status ->
    UniffiLib.INSTANCE.uniffi_tapyrus_wallet_ffi_fn_method_hdwallet_sync(
        it, _status)
}
    }
    
    

    
    /**
     * Transfer the amount to the address
     */
    @Throws(TransferException::class)override fun `transfer`(`params`: List<TransferParams>, `utxos`: List<TxOut>): kotlin.String {
            return FfiConverterString.lift(
    callWithPointer {
    uniffiRustCallWithError(TransferException) { _status ->
    UniffiLib.INSTANCE.uniffi_tapyrus_wallet_ffi_fn_method_hdwallet_transfer(
        it, FfiConverterSequenceTypeTransferParams.lower(`params`),FfiConverterSequenceTypeTxOut.lower(`utxos`),_status)
}
    }
    )
    }
    

    
    /**
     * Update the contract payable
     */
    @Throws(UpdateContractException::class)override fun `updateContract`(`contractId`: kotlin.String, `payable`: kotlin.Boolean)
        = 
    callWithPointer {
    uniffiRustCallWithError(UpdateContractException) { _status ->
    UniffiLib.INSTANCE.uniffi_tapyrus_wallet_ffi_fn_method_hdwallet_update_contract(
        it, FfiConverterString.lower(`contractId`),FfiConverterBoolean.lower(`payable`),_status)
}
    }
    
    

    
    /**
     * Verify the signature
     */
    @Throws(VerifySignException::class)override fun `verifySign`(`publicKey`: kotlin.String, `message`: kotlin.String, `signature`: kotlin.String): kotlin.Boolean {
            return FfiConverterBoolean.lift(
    callWithPointer {
    uniffiRustCallWithError(VerifySignException) { _status ->
    UniffiLib.INSTANCE.uniffi_tapyrus_wallet_ffi_fn_method_hdwallet_verify_sign(
        it, FfiConverterString.lower(`publicKey`),FfiConverterString.lower(`message`),FfiConverterString.lower(`signature`),_status)
}
    }
    )
    }
    

    

    
    
    companion object
    
}

/**
 * @suppress
 */
public object FfiConverterTypeHdWallet: FfiConverter<HdWallet, Pointer> {

    override fun lower(value: HdWallet): Pointer {
        return value.uniffiClonePointer()
    }

    override fun lift(value: Pointer): HdWallet {
        return HdWallet(value)
    }

    override fun read(buf: ByteBuffer): HdWallet {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: HdWallet) = 8UL

    override fun write(value: HdWallet, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}



/**
 * The contract for the Pay to Contract Protocol
 */
data class Contract (
    /**
     * The contract id of the contract
     * Wallet users can use this id to refer to the contract.
     */
    var `contractId`: kotlin.String, 
    /**
     * The commitment of the contract
     */
    var `contract`: kotlin.String, 
    /**
     * The public key the payment is sent to
     */
    var `paymentBase`: kotlin.String, 
    /**
     * Set to true to allow the wallet to use the transaction output for the payment
     */
    var `payable`: kotlin.Boolean
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeContract: FfiConverterRustBuffer<Contract> {
    override fun read(buf: ByteBuffer): Contract {
        return Contract(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterBoolean.read(buf),
        )
    }

    override fun allocationSize(value: Contract) = (
            FfiConverterString.allocationSize(value.`contractId`) +
            FfiConverterString.allocationSize(value.`contract`) +
            FfiConverterString.allocationSize(value.`paymentBase`) +
            FfiConverterBoolean.allocationSize(value.`payable`)
    )

    override fun write(value: Contract, buf: ByteBuffer) {
            FfiConverterString.write(value.`contractId`, buf)
            FfiConverterString.write(value.`contract`, buf)
            FfiConverterString.write(value.`paymentBase`, buf)
            FfiConverterBoolean.write(value.`payable`, buf)
    }
}



/**
 * The result of HDWallet#get_new_address
 */
data class GetNewAddressResult (
    /**
     * The new address
     */
    var `address`: kotlin.String, 
    /**
     * The public key of the address
     */
    var `publicKey`: kotlin.String
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeGetNewAddressResult: FfiConverterRustBuffer<GetNewAddressResult> {
    override fun read(buf: ByteBuffer): GetNewAddressResult {
        return GetNewAddressResult(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: GetNewAddressResult) = (
            FfiConverterString.allocationSize(value.`address`) +
            FfiConverterString.allocationSize(value.`publicKey`)
    )

    override fun write(value: GetNewAddressResult, buf: ByteBuffer) {
            FfiConverterString.write(value.`address`, buf)
            FfiConverterString.write(value.`publicKey`, buf)
    }
}



/**
 * The transfer parameters
 */
data class TransferParams (
    /**
     * The amount to transfer
     */
    var `amount`: kotlin.ULong, 
    /**
     * P2PKH or CP2PKH address to transfer to
     */
    var `toAddress`: kotlin.String
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeTransferParams: FfiConverterRustBuffer<TransferParams> {
    override fun read(buf: ByteBuffer): TransferParams {
        return TransferParams(
            FfiConverterULong.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: TransferParams) = (
            FfiConverterULong.allocationSize(value.`amount`) +
            FfiConverterString.allocationSize(value.`toAddress`)
    )

    override fun write(value: TransferParams, buf: ByteBuffer) {
            FfiConverterULong.write(value.`amount`, buf)
            FfiConverterString.write(value.`toAddress`, buf)
    }
}



/**
 * The transaction output
 */
data class TxOut (
    /**
     * The transaction id
     */
    var `txid`: kotlin.String, 
    /**
     * The index of the output
     */
    var `index`: kotlin.UInt, 
    /**
     * The amount of the output
     */
    var `amount`: kotlin.ULong, 
    /**
     * The color id of the output
     */
    var `colorId`: kotlin.String?, 
    /**
     * The address the output is locked to
     */
    var `address`: kotlin.String, 
    /**
     * True if the output is unspent
     */
    var `unspent`: kotlin.Boolean
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeTxOut: FfiConverterRustBuffer<TxOut> {
    override fun read(buf: ByteBuffer): TxOut {
        return TxOut(
            FfiConverterString.read(buf),
            FfiConverterUInt.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterBoolean.read(buf),
        )
    }

    override fun allocationSize(value: TxOut) = (
            FfiConverterString.allocationSize(value.`txid`) +
            FfiConverterUInt.allocationSize(value.`index`) +
            FfiConverterULong.allocationSize(value.`amount`) +
            FfiConverterOptionalString.allocationSize(value.`colorId`) +
            FfiConverterString.allocationSize(value.`address`) +
            FfiConverterBoolean.allocationSize(value.`unspent`)
    )

    override fun write(value: TxOut, buf: ByteBuffer) {
            FfiConverterString.write(value.`txid`, buf)
            FfiConverterUInt.write(value.`index`, buf)
            FfiConverterULong.write(value.`amount`, buf)
            FfiConverterOptionalString.write(value.`colorId`, buf)
            FfiConverterString.write(value.`address`, buf)
            FfiConverterBoolean.write(value.`unspent`, buf)
    }
}





/**
 * The error for HDWallet#balance
 */
sealed class BalanceException: kotlin.Exception() {
    
    /**
     * Occur if the color id is invalid
     */
    class InvalidColorId(
        ) : BalanceException() {
        override val message
            get() = ""
    }
    

    companion object ErrorHandler : UniffiRustCallStatusErrorHandler<BalanceException> {
        override fun lift(error_buf: RustBuffer.ByValue): BalanceException = FfiConverterTypeBalanceError.lift(error_buf)
    }

    
}

/**
 * @suppress
 */
public object FfiConverterTypeBalanceError : FfiConverterRustBuffer<BalanceException> {
    override fun read(buf: ByteBuffer): BalanceException {
        

        return when(buf.getInt()) {
            1 -> BalanceException.InvalidColorId()
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: BalanceException): ULong {
        return when(value) {
            is BalanceException.InvalidColorId -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
        }
    }

    override fun write(value: BalanceException, buf: ByteBuffer) {
        when(value) {
            is BalanceException.InvalidColorId -> {
                buf.putInt(1)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}





/**
 * The error for HDWallet#calc_p2c_address
 */
sealed class CalcPayToContractAddressException: kotlin.Exception() {
    
    /**
     * Occur if the public key is invalid
     */
    class FailedToParsePublicKey(
        ) : CalcPayToContractAddressException() {
        override val message
            get() = ""
    }
    
    /**
     * Occur if the contract is wrong
     */
    class ContractException(
        
        val `causeDescription`: kotlin.String
        ) : CalcPayToContractAddressException() {
        override val message
            get() = "causeDescription=${ `causeDescription` }"
    }
    
    /**
     * Occur if the color id is invalid
     */
    class InvalidColorId(
        ) : CalcPayToContractAddressException() {
        override val message
            get() = ""
    }
    

    companion object ErrorHandler : UniffiRustCallStatusErrorHandler<CalcPayToContractAddressException> {
        override fun lift(error_buf: RustBuffer.ByValue): CalcPayToContractAddressException = FfiConverterTypeCalcPayToContractAddressError.lift(error_buf)
    }

    
}

/**
 * @suppress
 */
public object FfiConverterTypeCalcPayToContractAddressError : FfiConverterRustBuffer<CalcPayToContractAddressException> {
    override fun read(buf: ByteBuffer): CalcPayToContractAddressException {
        

        return when(buf.getInt()) {
            1 -> CalcPayToContractAddressException.FailedToParsePublicKey()
            2 -> CalcPayToContractAddressException.ContractException(
                FfiConverterString.read(buf),
                )
            3 -> CalcPayToContractAddressException.InvalidColorId()
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: CalcPayToContractAddressException): ULong {
        return when(value) {
            is CalcPayToContractAddressException.FailedToParsePublicKey -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is CalcPayToContractAddressException.ContractException -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.`causeDescription`)
            )
            is CalcPayToContractAddressException.InvalidColorId -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
        }
    }

    override fun write(value: CalcPayToContractAddressException, buf: ByteBuffer) {
        when(value) {
            is CalcPayToContractAddressException.FailedToParsePublicKey -> {
                buf.putInt(1)
                Unit
            }
            is CalcPayToContractAddressException.ContractException -> {
                buf.putInt(2)
                FfiConverterString.write(value.`causeDescription`, buf)
                Unit
            }
            is CalcPayToContractAddressException.InvalidColorId -> {
                buf.putInt(3)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}





/**
 * The error for HDWallet#check_trust_layer_refund
 */
sealed class CheckTrustLayerRefundException: kotlin.Exception() {
    
    /**
     * Occur if the txid is invalid
     */
    class FailedToParseTxid(
        
        val `txid`: kotlin.String
        ) : CheckTrustLayerRefundException() {
        override val message
            get() = "txid=${ `txid` }"
    }
    
    /**
     * Occur if the esplora client fails to connect
     */
    class EsploraClientException(
        
        val `causeDescription`: kotlin.String
        ) : CheckTrustLayerRefundException() {
        override val message
            get() = "causeDescription=${ `causeDescription` }"
    }
    
    /**
     * Occur if the transaction is not found in the esplora
     */
    class UnknownTxid(
        ) : CheckTrustLayerRefundException() {
        override val message
            get() = ""
    }
    
    /**
     * Occur if the refund transaction is not found in the esplora
     */
    class CannotFoundRefundTransaction(
        
        val `txid`: kotlin.String
        ) : CheckTrustLayerRefundException() {
        override val message
            get() = "txid=${ `txid` }"
    }
    
    /**
     * Occur if the color id is invalid
     */
    class InvalidColorId(
        ) : CheckTrustLayerRefundException() {
        override val message
            get() = ""
    }
    

    companion object ErrorHandler : UniffiRustCallStatusErrorHandler<CheckTrustLayerRefundException> {
        override fun lift(error_buf: RustBuffer.ByValue): CheckTrustLayerRefundException = FfiConverterTypeCheckTrustLayerRefundError.lift(error_buf)
    }

    
}

/**
 * @suppress
 */
public object FfiConverterTypeCheckTrustLayerRefundError : FfiConverterRustBuffer<CheckTrustLayerRefundException> {
    override fun read(buf: ByteBuffer): CheckTrustLayerRefundException {
        

        return when(buf.getInt()) {
            1 -> CheckTrustLayerRefundException.FailedToParseTxid(
                FfiConverterString.read(buf),
                )
            2 -> CheckTrustLayerRefundException.EsploraClientException(
                FfiConverterString.read(buf),
                )
            3 -> CheckTrustLayerRefundException.UnknownTxid()
            4 -> CheckTrustLayerRefundException.CannotFoundRefundTransaction(
                FfiConverterString.read(buf),
                )
            5 -> CheckTrustLayerRefundException.InvalidColorId()
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: CheckTrustLayerRefundException): ULong {
        return when(value) {
            is CheckTrustLayerRefundException.FailedToParseTxid -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.`txid`)
            )
            is CheckTrustLayerRefundException.EsploraClientException -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.`causeDescription`)
            )
            is CheckTrustLayerRefundException.UnknownTxid -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is CheckTrustLayerRefundException.CannotFoundRefundTransaction -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.`txid`)
            )
            is CheckTrustLayerRefundException.InvalidColorId -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
        }
    }

    override fun write(value: CheckTrustLayerRefundException, buf: ByteBuffer) {
        when(value) {
            is CheckTrustLayerRefundException.FailedToParseTxid -> {
                buf.putInt(1)
                FfiConverterString.write(value.`txid`, buf)
                Unit
            }
            is CheckTrustLayerRefundException.EsploraClientException -> {
                buf.putInt(2)
                FfiConverterString.write(value.`causeDescription`, buf)
                Unit
            }
            is CheckTrustLayerRefundException.UnknownTxid -> {
                buf.putInt(3)
                Unit
            }
            is CheckTrustLayerRefundException.CannotFoundRefundTransaction -> {
                buf.putInt(4)
                FfiConverterString.write(value.`txid`, buf)
                Unit
            }
            is CheckTrustLayerRefundException.InvalidColorId -> {
                buf.putInt(5)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}





/**
 * The error for HDWallet#get_new_address
 */
sealed class GetNewAddressException: kotlin.Exception() {
    
    /**
     * Occur if the color id is invalid
     */
    class InvalidColorId(
        ) : GetNewAddressException() {
        override val message
            get() = ""
    }
    

    companion object ErrorHandler : UniffiRustCallStatusErrorHandler<GetNewAddressException> {
        override fun lift(error_buf: RustBuffer.ByValue): GetNewAddressException = FfiConverterTypeGetNewAddressError.lift(error_buf)
    }

    
}

/**
 * @suppress
 */
public object FfiConverterTypeGetNewAddressError : FfiConverterRustBuffer<GetNewAddressException> {
    override fun read(buf: ByteBuffer): GetNewAddressException {
        

        return when(buf.getInt()) {
            1 -> GetNewAddressException.InvalidColorId()
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: GetNewAddressException): ULong {
        return when(value) {
            is GetNewAddressException.InvalidColorId -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
        }
    }

    override fun write(value: GetNewAddressException, buf: ByteBuffer) {
        when(value) {
            is GetNewAddressException.InvalidColorId -> {
                buf.putInt(1)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}





/**
 * The error for HDWallet#get_transaction
 */
sealed class GetTransactionException: kotlin.Exception() {
    
    /**
     * Occur if the txid is invalid
     */
    class FailedToParseTxid(
        
        val `txid`: kotlin.String
        ) : GetTransactionException() {
        override val message
            get() = "txid=${ `txid` }"
    }
    
    /**
     * Occur if the esplora client fails to connect
     */
    class EsploraClientException(
        
        val `causeDescription`: kotlin.String
        ) : GetTransactionException() {
        override val message
            get() = "causeDescription=${ `causeDescription` }"
    }
    
    /**
     * Occur if the transaction is not found in the esplora
     */
    class UnknownTxid(
        ) : GetTransactionException() {
        override val message
            get() = ""
    }
    

    companion object ErrorHandler : UniffiRustCallStatusErrorHandler<GetTransactionException> {
        override fun lift(error_buf: RustBuffer.ByValue): GetTransactionException = FfiConverterTypeGetTransactionError.lift(error_buf)
    }

    
}

/**
 * @suppress
 */
public object FfiConverterTypeGetTransactionError : FfiConverterRustBuffer<GetTransactionException> {
    override fun read(buf: ByteBuffer): GetTransactionException {
        

        return when(buf.getInt()) {
            1 -> GetTransactionException.FailedToParseTxid(
                FfiConverterString.read(buf),
                )
            2 -> GetTransactionException.EsploraClientException(
                FfiConverterString.read(buf),
                )
            3 -> GetTransactionException.UnknownTxid()
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: GetTransactionException): ULong {
        return when(value) {
            is GetTransactionException.FailedToParseTxid -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.`txid`)
            )
            is GetTransactionException.EsploraClientException -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.`causeDescription`)
            )
            is GetTransactionException.UnknownTxid -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
        }
    }

    override fun write(value: GetTransactionException, buf: ByteBuffer) {
        when(value) {
            is GetTransactionException.FailedToParseTxid -> {
                buf.putInt(1)
                FfiConverterString.write(value.`txid`, buf)
                Unit
            }
            is GetTransactionException.EsploraClientException -> {
                buf.putInt(2)
                FfiConverterString.write(value.`causeDescription`, buf)
                Unit
            }
            is GetTransactionException.UnknownTxid -> {
                buf.putInt(3)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}





/**
 * The error for HDWallet#get_tx_out_by_address
 */
sealed class GetTxOutByAddressException: kotlin.Exception() {
    
    /**
     * Occur if the transaction hex is invalid
     */
    class FailedToParseTxHex(
        ) : GetTxOutByAddressException() {
        override val message
            get() = ""
    }
    
    /**
     * Occur if the address is invalid
     */
    class FailedToParseAddress(
        
        val `address`: kotlin.String
        ) : GetTxOutByAddressException() {
        override val message
            get() = "address=${ `address` }"
    }
    
    /**
     * Occur if the esplora client fails to connect
     */
    class EsploraClientException(
        
        val `causeDescription`: kotlin.String
        ) : GetTxOutByAddressException() {
        override val message
            get() = "causeDescription=${ `causeDescription` }"
    }
    
    /**
     * Occur if the transaction is not found in the esplora
     */
    class UnknownTransaction(
        ) : GetTxOutByAddressException() {
        override val message
            get() = ""
    }
    

    companion object ErrorHandler : UniffiRustCallStatusErrorHandler<GetTxOutByAddressException> {
        override fun lift(error_buf: RustBuffer.ByValue): GetTxOutByAddressException = FfiConverterTypeGetTxOutByAddressError.lift(error_buf)
    }

    
}

/**
 * @suppress
 */
public object FfiConverterTypeGetTxOutByAddressError : FfiConverterRustBuffer<GetTxOutByAddressException> {
    override fun read(buf: ByteBuffer): GetTxOutByAddressException {
        

        return when(buf.getInt()) {
            1 -> GetTxOutByAddressException.FailedToParseTxHex()
            2 -> GetTxOutByAddressException.FailedToParseAddress(
                FfiConverterString.read(buf),
                )
            3 -> GetTxOutByAddressException.EsploraClientException(
                FfiConverterString.read(buf),
                )
            4 -> GetTxOutByAddressException.UnknownTransaction()
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: GetTxOutByAddressException): ULong {
        return when(value) {
            is GetTxOutByAddressException.FailedToParseTxHex -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is GetTxOutByAddressException.FailedToParseAddress -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.`address`)
            )
            is GetTxOutByAddressException.EsploraClientException -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.`causeDescription`)
            )
            is GetTxOutByAddressException.UnknownTransaction -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
        }
    }

    override fun write(value: GetTxOutByAddressException, buf: ByteBuffer) {
        when(value) {
            is GetTxOutByAddressException.FailedToParseTxHex -> {
                buf.putInt(1)
                Unit
            }
            is GetTxOutByAddressException.FailedToParseAddress -> {
                buf.putInt(2)
                FfiConverterString.write(value.`address`, buf)
                Unit
            }
            is GetTxOutByAddressException.EsploraClientException -> {
                buf.putInt(3)
                FfiConverterString.write(value.`causeDescription`, buf)
                Unit
            }
            is GetTxOutByAddressException.UnknownTransaction -> {
                buf.putInt(4)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}



/**
 * The tapyrus network mode
 */

enum class Network {
    
    /**
     * The tapyrus network mode for Production
     */
    PROD,
    /**
     * The tapyrus network mode for Development
     */
    DEV;
    companion object
}


/**
 * @suppress
 */
public object FfiConverterTypeNetwork: FfiConverterRustBuffer<Network> {
    override fun read(buf: ByteBuffer) = try {
        Network.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: Network) = 4UL

    override fun write(value: Network, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}







/**
 * The error for HDWallet constructor
 */
sealed class NewException: kotlin.Exception() {
    
    /**
     * Occur if the master key file is wrong or not found
     */
    class LoadMasterKeyException(
        
        val `causeDescription`: kotlin.String
        ) : NewException() {
        override val message
            get() = "causeDescription=${ `causeDescription` }"
    }
    
    /**
     * Occur if the wallet db file is wrong or not found
     */
    class LoadWalletDbException(
        
        val `causeDescription`: kotlin.String
        ) : NewException() {
        override val message
            get() = "causeDescription=${ `causeDescription` }"
    }
    
    /**
     * Occur if the genesis hash is wrong
     */
    class ParseGenesisHashException(
        ) : NewException() {
        override val message
            get() = ""
    }
    
    /**
     * Occur if the genesis hash does not match the wallet db
     */
    class LoadedGenesisDoesNotMatch(
        
        val `expected`: kotlin.String, 
        
        val `got`: kotlin.String?
        ) : NewException() {
        override val message
            get() = "expected=${ `expected` }, got=${ `got` }"
    }
    
    /**
     * Occur if the network id does not match the wallet db
     */
    class LoadedNetworkDoesNotMatch(
        
        val `expected`: Network, 
        
        val `got`: Network?
        ) : NewException() {
        override val message
            get() = "expected=${ `expected` }, got=${ `got` }"
    }
    
    /**
     * Occur if the wallet db is not initialized
     */
    class NotInitialized(
        ) : NewException() {
        override val message
            get() = ""
    }
    
    /**
     * Occur if the master key is not match with persisted.
     */
    class MasterKeyDoesNotMatch(
        
        val `got`: kotlin.String?, 
        
        val `keychain`: kotlin.String
        ) : NewException() {
        override val message
            get() = "got=${ `got` }, keychain=${ `keychain` }"
    }
    

    companion object ErrorHandler : UniffiRustCallStatusErrorHandler<NewException> {
        override fun lift(error_buf: RustBuffer.ByValue): NewException = FfiConverterTypeNewError.lift(error_buf)
    }

    
}

/**
 * @suppress
 */
public object FfiConverterTypeNewError : FfiConverterRustBuffer<NewException> {
    override fun read(buf: ByteBuffer): NewException {
        

        return when(buf.getInt()) {
            1 -> NewException.LoadMasterKeyException(
                FfiConverterString.read(buf),
                )
            2 -> NewException.LoadWalletDbException(
                FfiConverterString.read(buf),
                )
            3 -> NewException.ParseGenesisHashException()
            4 -> NewException.LoadedGenesisDoesNotMatch(
                FfiConverterString.read(buf),
                FfiConverterOptionalString.read(buf),
                )
            5 -> NewException.LoadedNetworkDoesNotMatch(
                FfiConverterTypeNetwork.read(buf),
                FfiConverterOptionalTypeNetwork.read(buf),
                )
            6 -> NewException.NotInitialized()
            7 -> NewException.MasterKeyDoesNotMatch(
                FfiConverterOptionalString.read(buf),
                FfiConverterString.read(buf),
                )
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: NewException): ULong {
        return when(value) {
            is NewException.LoadMasterKeyException -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.`causeDescription`)
            )
            is NewException.LoadWalletDbException -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.`causeDescription`)
            )
            is NewException.ParseGenesisHashException -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is NewException.LoadedGenesisDoesNotMatch -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.`expected`)
                + FfiConverterOptionalString.allocationSize(value.`got`)
            )
            is NewException.LoadedNetworkDoesNotMatch -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterTypeNetwork.allocationSize(value.`expected`)
                + FfiConverterOptionalTypeNetwork.allocationSize(value.`got`)
            )
            is NewException.NotInitialized -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is NewException.MasterKeyDoesNotMatch -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterOptionalString.allocationSize(value.`got`)
                + FfiConverterString.allocationSize(value.`keychain`)
            )
        }
    }

    override fun write(value: NewException, buf: ByteBuffer) {
        when(value) {
            is NewException.LoadMasterKeyException -> {
                buf.putInt(1)
                FfiConverterString.write(value.`causeDescription`, buf)
                Unit
            }
            is NewException.LoadWalletDbException -> {
                buf.putInt(2)
                FfiConverterString.write(value.`causeDescription`, buf)
                Unit
            }
            is NewException.ParseGenesisHashException -> {
                buf.putInt(3)
                Unit
            }
            is NewException.LoadedGenesisDoesNotMatch -> {
                buf.putInt(4)
                FfiConverterString.write(value.`expected`, buf)
                FfiConverterOptionalString.write(value.`got`, buf)
                Unit
            }
            is NewException.LoadedNetworkDoesNotMatch -> {
                buf.putInt(5)
                FfiConverterTypeNetwork.write(value.`expected`, buf)
                FfiConverterOptionalTypeNetwork.write(value.`got`, buf)
                Unit
            }
            is NewException.NotInitialized -> {
                buf.putInt(6)
                Unit
            }
            is NewException.MasterKeyDoesNotMatch -> {
                buf.putInt(7)
                FfiConverterOptionalString.write(value.`got`, buf)
                FfiConverterString.write(value.`keychain`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}





/**
 * The error for HDWallet#sign_message
 */
sealed class SignMessageException: kotlin.Exception() {
    
    /**
     * Occur if the public key is invalid
     */
    class FailedToParsePublicKey(
        ) : SignMessageException() {
        override val message
            get() = ""
    }
    
    /**
     * Occur if the public key is not found in the wallet
     */
    class PublicKeyNotFoundInWallet(
        ) : SignMessageException() {
        override val message
            get() = ""
    }
    

    companion object ErrorHandler : UniffiRustCallStatusErrorHandler<SignMessageException> {
        override fun lift(error_buf: RustBuffer.ByValue): SignMessageException = FfiConverterTypeSignMessageError.lift(error_buf)
    }

    
}

/**
 * @suppress
 */
public object FfiConverterTypeSignMessageError : FfiConverterRustBuffer<SignMessageException> {
    override fun read(buf: ByteBuffer): SignMessageException {
        

        return when(buf.getInt()) {
            1 -> SignMessageException.FailedToParsePublicKey()
            2 -> SignMessageException.PublicKeyNotFoundInWallet()
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: SignMessageException): ULong {
        return when(value) {
            is SignMessageException.FailedToParsePublicKey -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is SignMessageException.PublicKeyNotFoundInWallet -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
        }
    }

    override fun write(value: SignMessageException, buf: ByteBuffer) {
        when(value) {
            is SignMessageException.FailedToParsePublicKey -> {
                buf.putInt(1)
                Unit
            }
            is SignMessageException.PublicKeyNotFoundInWallet -> {
                buf.putInt(2)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}





/**
 * The error for HDWallet#store_contract
 */
sealed class StoreContractException: kotlin.Exception() {
    
    /**
     * Occur if the contract is wrong
     */
    class ContractException(
        
        val `causeDescription`: kotlin.String
        ) : StoreContractException() {
        override val message
            get() = "causeDescription=${ `causeDescription` }"
    }
    
    /**
     * Occur if the public key is invalid
     */
    class FailedToParsePublicKey(
        ) : StoreContractException() {
        override val message
            get() = ""
    }
    

    companion object ErrorHandler : UniffiRustCallStatusErrorHandler<StoreContractException> {
        override fun lift(error_buf: RustBuffer.ByValue): StoreContractException = FfiConverterTypeStoreContractError.lift(error_buf)
    }

    
}

/**
 * @suppress
 */
public object FfiConverterTypeStoreContractError : FfiConverterRustBuffer<StoreContractException> {
    override fun read(buf: ByteBuffer): StoreContractException {
        

        return when(buf.getInt()) {
            1 -> StoreContractException.ContractException(
                FfiConverterString.read(buf),
                )
            2 -> StoreContractException.FailedToParsePublicKey()
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: StoreContractException): ULong {
        return when(value) {
            is StoreContractException.ContractException -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.`causeDescription`)
            )
            is StoreContractException.FailedToParsePublicKey -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
        }
    }

    override fun write(value: StoreContractException, buf: ByteBuffer) {
        when(value) {
            is StoreContractException.ContractException -> {
                buf.putInt(1)
                FfiConverterString.write(value.`causeDescription`, buf)
                Unit
            }
            is StoreContractException.FailedToParsePublicKey -> {
                buf.putInt(2)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}





/**
 * The error for HDWallet#sync
 */
sealed class SyncException: kotlin.Exception() {
    
    /**
     * Occur if the esplora client fails to connect
     */
    class EsploraClientException(
        
        val `causeDescription`: kotlin.String
        ) : SyncException() {
        override val message
            get() = "causeDescription=${ `causeDescription` }"
    }
    
    /**
     * Occur if the wallet fails to update the wallet db
     */
    class UpdateWalletException(
        
        val `causeDescription`: kotlin.String
        ) : SyncException() {
        override val message
            get() = "causeDescription=${ `causeDescription` }"
    }
    

    companion object ErrorHandler : UniffiRustCallStatusErrorHandler<SyncException> {
        override fun lift(error_buf: RustBuffer.ByValue): SyncException = FfiConverterTypeSyncError.lift(error_buf)
    }

    
}

/**
 * @suppress
 */
public object FfiConverterTypeSyncError : FfiConverterRustBuffer<SyncException> {
    override fun read(buf: ByteBuffer): SyncException {
        

        return when(buf.getInt()) {
            1 -> SyncException.EsploraClientException(
                FfiConverterString.read(buf),
                )
            2 -> SyncException.UpdateWalletException(
                FfiConverterString.read(buf),
                )
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: SyncException): ULong {
        return when(value) {
            is SyncException.EsploraClientException -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.`causeDescription`)
            )
            is SyncException.UpdateWalletException -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.`causeDescription`)
            )
        }
    }

    override fun write(value: SyncException, buf: ByteBuffer) {
        when(value) {
            is SyncException.EsploraClientException -> {
                buf.putInt(1)
                FfiConverterString.write(value.`causeDescription`, buf)
                Unit
            }
            is SyncException.UpdateWalletException -> {
                buf.putInt(2)
                FfiConverterString.write(value.`causeDescription`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}





/**
 * The error for HDWallet#transfer
 */
sealed class TransferException: kotlin.Exception() {
    
    /**
     * Occur if the wallet does not have enough funds to transfer
     */
    class InsufficientFund(
        ) : TransferException() {
        override val message
            get() = ""
    }
    
    /**
     * Occur if the esplora client fails to connect
     */
    class EsploraClient(
        
        val `causeDescription`: kotlin.String
        ) : TransferException() {
        override val message
            get() = "causeDescription=${ `causeDescription` }"
    }
    
    /**
     * Occur if the address is invalid
     */
    class FailedToParseAddress(
        
        val `address`: kotlin.String
        ) : TransferException() {
        override val message
            get() = "address=${ `address` }"
    }
    
    /**
     * Occur if the network mode of the address is not matched
     */
    class WrongNetworkAddress(
        
        val `address`: kotlin.String
        ) : TransferException() {
        override val message
            get() = "address=${ `address` }"
    }
    
    /**
     * Occur if the txid in the TxOut is invalid
     */
    class FailedToParseTxid(
        
        val `txid`: kotlin.String
        ) : TransferException() {
        override val message
            get() = "txid=${ `txid` }"
    }
    
    /**
     * Occur if the amount to transfer is invalid
     */
    class InvalidTransferAmount(
        
        val `causeDescription`: kotlin.String
        ) : TransferException() {
        override val message
            get() = "causeDescription=${ `causeDescription` }"
    }
    
    /**
     * Occur if the UTXO which means TxOut is not in the wallet db because_description the wallet is not synced or any other reasons
     */
    class UnknownUtxo(
        
        val `utxo`: TxOut
        ) : TransferException() {
        override val message
            get() = "utxo=${ `utxo` }"
    }
    
    /**
     * Occur if the wallet fails to create a transaction
     */
    class FailedToCreateTransaction(
        
        val `causeDescription`: kotlin.String
        ) : TransferException() {
        override val message
            get() = "causeDescription=${ `causeDescription` }"
    }
    

    companion object ErrorHandler : UniffiRustCallStatusErrorHandler<TransferException> {
        override fun lift(error_buf: RustBuffer.ByValue): TransferException = FfiConverterTypeTransferError.lift(error_buf)
    }

    
}

/**
 * @suppress
 */
public object FfiConverterTypeTransferError : FfiConverterRustBuffer<TransferException> {
    override fun read(buf: ByteBuffer): TransferException {
        

        return when(buf.getInt()) {
            1 -> TransferException.InsufficientFund()
            2 -> TransferException.EsploraClient(
                FfiConverterString.read(buf),
                )
            3 -> TransferException.FailedToParseAddress(
                FfiConverterString.read(buf),
                )
            4 -> TransferException.WrongNetworkAddress(
                FfiConverterString.read(buf),
                )
            5 -> TransferException.FailedToParseTxid(
                FfiConverterString.read(buf),
                )
            6 -> TransferException.InvalidTransferAmount(
                FfiConverterString.read(buf),
                )
            7 -> TransferException.UnknownUtxo(
                FfiConverterTypeTxOut.read(buf),
                )
            8 -> TransferException.FailedToCreateTransaction(
                FfiConverterString.read(buf),
                )
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: TransferException): ULong {
        return when(value) {
            is TransferException.InsufficientFund -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is TransferException.EsploraClient -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.`causeDescription`)
            )
            is TransferException.FailedToParseAddress -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.`address`)
            )
            is TransferException.WrongNetworkAddress -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.`address`)
            )
            is TransferException.FailedToParseTxid -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.`txid`)
            )
            is TransferException.InvalidTransferAmount -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.`causeDescription`)
            )
            is TransferException.UnknownUtxo -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterTypeTxOut.allocationSize(value.`utxo`)
            )
            is TransferException.FailedToCreateTransaction -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.`causeDescription`)
            )
        }
    }

    override fun write(value: TransferException, buf: ByteBuffer) {
        when(value) {
            is TransferException.InsufficientFund -> {
                buf.putInt(1)
                Unit
            }
            is TransferException.EsploraClient -> {
                buf.putInt(2)
                FfiConverterString.write(value.`causeDescription`, buf)
                Unit
            }
            is TransferException.FailedToParseAddress -> {
                buf.putInt(3)
                FfiConverterString.write(value.`address`, buf)
                Unit
            }
            is TransferException.WrongNetworkAddress -> {
                buf.putInt(4)
                FfiConverterString.write(value.`address`, buf)
                Unit
            }
            is TransferException.FailedToParseTxid -> {
                buf.putInt(5)
                FfiConverterString.write(value.`txid`, buf)
                Unit
            }
            is TransferException.InvalidTransferAmount -> {
                buf.putInt(6)
                FfiConverterString.write(value.`causeDescription`, buf)
                Unit
            }
            is TransferException.UnknownUtxo -> {
                buf.putInt(7)
                FfiConverterTypeTxOut.write(value.`utxo`, buf)
                Unit
            }
            is TransferException.FailedToCreateTransaction -> {
                buf.putInt(8)
                FfiConverterString.write(value.`causeDescription`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}





/**
 * The error for HDWallet#update_contract
 */
sealed class UpdateContractException: kotlin.Exception() {
    
    /**
     * Occur if the contract is wrong
     */
    class ContractException(
        
        val `causeDescription`: kotlin.String
        ) : UpdateContractException() {
        override val message
            get() = "causeDescription=${ `causeDescription` }"
    }
    

    companion object ErrorHandler : UniffiRustCallStatusErrorHandler<UpdateContractException> {
        override fun lift(error_buf: RustBuffer.ByValue): UpdateContractException = FfiConverterTypeUpdateContractError.lift(error_buf)
    }

    
}

/**
 * @suppress
 */
public object FfiConverterTypeUpdateContractError : FfiConverterRustBuffer<UpdateContractException> {
    override fun read(buf: ByteBuffer): UpdateContractException {
        

        return when(buf.getInt()) {
            1 -> UpdateContractException.ContractException(
                FfiConverterString.read(buf),
                )
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: UpdateContractException): ULong {
        return when(value) {
            is UpdateContractException.ContractException -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.`causeDescription`)
            )
        }
    }

    override fun write(value: UpdateContractException, buf: ByteBuffer) {
        when(value) {
            is UpdateContractException.ContractException -> {
                buf.putInt(1)
                FfiConverterString.write(value.`causeDescription`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}





/**
 * The error for HDWallet#verify_sign
 */
sealed class VerifySignException: kotlin.Exception() {
    
    /**
     * Occur if the public key is invalid
     */
    class FailedToParsePublicKey(
        ) : VerifySignException() {
        override val message
            get() = ""
    }
    
    /**
     * Occur if the signature format is invalid
     */
    class FailedToParseSignature(
        ) : VerifySignException() {
        override val message
            get() = ""
    }
    

    companion object ErrorHandler : UniffiRustCallStatusErrorHandler<VerifySignException> {
        override fun lift(error_buf: RustBuffer.ByValue): VerifySignException = FfiConverterTypeVerifySignError.lift(error_buf)
    }

    
}

/**
 * @suppress
 */
public object FfiConverterTypeVerifySignError : FfiConverterRustBuffer<VerifySignException> {
    override fun read(buf: ByteBuffer): VerifySignException {
        

        return when(buf.getInt()) {
            1 -> VerifySignException.FailedToParsePublicKey()
            2 -> VerifySignException.FailedToParseSignature()
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: VerifySignException): ULong {
        return when(value) {
            is VerifySignException.FailedToParsePublicKey -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is VerifySignException.FailedToParseSignature -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
        }
    }

    override fun write(value: VerifySignException, buf: ByteBuffer) {
        when(value) {
            is VerifySignException.FailedToParsePublicKey -> {
                buf.putInt(1)
                Unit
            }
            is VerifySignException.FailedToParseSignature -> {
                buf.putInt(2)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}




/**
 * @suppress
 */
public object FfiConverterOptionalString: FfiConverterRustBuffer<kotlin.String?> {
    override fun read(buf: ByteBuffer): kotlin.String? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterString.read(buf)
    }

    override fun allocationSize(value: kotlin.String?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterString.allocationSize(value)
        }
    }

    override fun write(value: kotlin.String?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterString.write(value, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterOptionalTypeNetwork: FfiConverterRustBuffer<Network?> {
    override fun read(buf: ByteBuffer): Network? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeNetwork.read(buf)
    }

    override fun allocationSize(value: Network?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeNetwork.allocationSize(value)
        }
    }

    override fun write(value: Network?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeNetwork.write(value, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterSequenceTypeTransferParams: FfiConverterRustBuffer<List<TransferParams>> {
    override fun read(buf: ByteBuffer): List<TransferParams> {
        val len = buf.getInt()
        return List<TransferParams>(len) {
            FfiConverterTypeTransferParams.read(buf)
        }
    }

    override fun allocationSize(value: List<TransferParams>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeTransferParams.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<TransferParams>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeTransferParams.write(it, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterSequenceTypeTxOut: FfiConverterRustBuffer<List<TxOut>> {
    override fun read(buf: ByteBuffer): List<TxOut> {
        val len = buf.getInt()
        return List<TxOut>(len) {
            FfiConverterTypeTxOut.read(buf)
        }
    }

    override fun allocationSize(value: List<TxOut>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeTxOut.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<TxOut>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeTxOut.write(it, buf)
        }
    }
}
        /**
         * Generate Master Key
         */ fun `generateMasterKey`(`networkMode`: Network): kotlin.String {
            return FfiConverterString.lift(
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_tapyrus_wallet_ffi_fn_func_generate_master_key(
        FfiConverterTypeNetwork.lower(`networkMode`),_status)
}
    )
    }
    


